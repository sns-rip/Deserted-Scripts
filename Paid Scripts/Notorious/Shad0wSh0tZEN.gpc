/*一止勝軍刊話料重請付応議定価玉祭務受。贈示知綿教治約方医毎他基稿員誤覧。機庭済年事女育察川被享夜悩真約検気塚。場構日入期政著反展塗向見能上。一止勝軍刊話料重請付応議定価玉祭務受。贈示知綿教治約方医毎他基稿員誤覧。機庭済年事女育察川被享夜悩真約検気塚。場構日入期政著反展塗向見能上。

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@#~~~~!#@@5~~~~~P@@@@BJ!^^~75#@@#!~~~~~~~~~~~~7&@@#Y7~^^!J#@@@@Y~~~~~~~~75&@@@P~~~~~P@@@@BJ!~^~7Y#@@@&7~~~~7&@#~~~~~?@@@BJ!^^~7JG&@@@@@G?!^^~75#@@G!~~~~~~~7Y#@@@B!~~~~Y@P~~~~~~~!?G@@Y~~~~~~~~~~~~~Y7~~~~~~~~~~~Y@@
@@@@@@@@@: ^^^. Y& .^^^. @@J..:^^^^^:.:B^ ^^^^^^^^^^^^ JG:.:^^^^^:..5@# :^^^^^^^:. !@@ .^^^. @@Y..:^^^^^:.:G@Y ^^^^ Y@^ ^^^: G#..:^^^^^:..^@@7..:^^^^^: ^#. ^^^^^^^^: ^&@: ^^^: B..^^^^^^^:..! :^^^^^^^^^^~.  ^^^^^^^^^^: #@
@@@@@@@@@: ~~~~^ . :~~~..&^ ^~~~^^^~~~:   ^^^^~~~~^^^:   :~~~^^^~~~^ 7# :~~~^^^~~~^ ^@..~~~. &^ ^~~~^^^~~~: YY ~~~^ Y@: ~~~^ ? .~~~^^^~~~ !&..^~~~^^^~~~ ...~~~~^^~~~~..&^ ~~~: B..~~~^^^~~~^  .^^^~~~~^^^^.  ^^^^^^~~~~: &@
@@@@@@@@@: ~~~~~~. :~~~..~ ~~~~.:7 :~~~: ^77. ~~~^ :77: ^~~~..7..~~~^ ~ :~~~.  .~~~: B..~~~. ! ~~~~.:7 :~~~: : ^~~^ Y@^ ~~~^ : ^~~~:.  . ^@: ~~~^ ^7 ...!#:.~~~:  .~~~^ 5~ ~~~: B..~~~.  :~~~. 77~ :~~~. 77?PJ7?^  ^~~~..G@@
@@@@@@@@@: ~~~~~~~^^~~~.  .~~~: &@J ^~~~ ?@@7 ~~~^ Y@@^.~~~^ G@B ^~~~.. :~~~:..^~~~. &..~~~.  .~~~: #@J ^~~~   ^~~^ 5@^ ~~~^ ?..~~~~~~^:..7 :~~~. @@&YG@@@:.~~~^..:~~~: B^ ~~~: B..~~~:..^~~~ ^@@& :~~~..@@@@@@P..~~~^ ~&@@@
@@@@@@@@@: ~~~^:~~~~~~~....~~~: B@~ ~~~~ ?@@7 ~~~^ J@@^ ~~~^ J@Y ^~~~ . :~~~~~~~~~. B@ .~~~. ..~~~: G@! ~~~~   ^~~~ !@..~~~^ #G  .:^^~~~~^  .~~~: #@Y~7G@@:.~~~~~~~~~: Y@^ ~~~: B..~~~~~~~~^ :&@@# :~~~..@@@@&^ ^~~~. 5@@@@@
@@@@@@@@@: ~~~^  ^~~~~~..J ^~~~:.:.^~~~. &@@7 ~~~^ J@@# :~~~:.:.:~~~: ? :~~~:.^~~~. #@ .~~~. 5 :~~~:.:.^~~~. P :~~~:...^~~~..#..^:...:~~~~ . ^~~~:.:.^:..~..~~~:.^~~~: P@^ ~~~: B..~~~:...:^P@@@@# :~~~..@@@5 .~~~~. .^::^&@
@@@@@@@@@: ~~~^ ~..~~~~..@J :~~~~~~~~^..#@@@! ~~~~ J@@@G .^~~~~~~~^. G# :~~~.  ^~~~: 5..~~~. @5 .~~~~~~~~^..#@5 :~~~~~~~~^. B: ~~~~~~~~~~. #J :~~~~~~~~^ ...~~~:  :~~~^ J^ ~~~: B..~~~. &@@@@@@@@# :~~~..@@@ .~~~~~~~~~~^ G@
@@@@@@@@@^ :::. #&^ ::: .@@&!..::::..:Y@@@@@? :::: 5@@@@&?:..:::...?&@& .::: .? ::::.  .::: .@@#!..::::..:Y@@@@#~..::::...7&@P~:..:::::..^&@@#~..::::..:Y@: :::. Y .:::.   :::. #. ::: .@@@@@@@@@& .::: :@@@. ::::::::::. B@
@@@@@@@@@@G5555B@@@B555P&@@@@@#P5Y5G&@@@@@@@@BPPPPB@@@@@@@@&BP5PB&@@@@@#555PG@@&P5555B#PPPPP&@@@@@#G5YPB&@@@@@@@@@#G5Y5G#@@@@@@@&BP555G#@@@@@@@@#G55P#&@@@&P555P&@&P5555G#GPPPP&@&P5PPP&@@@@@@@@@@#5555P&@@@&P55555555555B@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BGGGBBGB#@@@@@BGGGGBBB#&@@@@@@@@@#BPPB&@@@@@&BGBBBGGB&@@@@@@#GGGG#@@@BGGGB&@@@@@&BP5PB&@@@#GGGGGGGGGGGG&@#GGGG&@@@@@@#G5G#&@@@@@@BGGB&@@@&BBBGB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@? ::::::...^G@! :::::::..:5@@@@5^..:::..:?&@@. :::::....^5@@5 .::. Y@7 :::. #@&J:..:::..:J7 :::::::::::.   :::. #@@5^..:::..:?&@@..::. 7@B .::: 7@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@~ ~~~~~~~~~: ?^.~~~~~~~~~^ ^@#..^~~~~~~~^. P@ .~~~~~~~~~^..#J ~~~~ ?@! ~~~^ BG .^~~~~~~~^.  ~~~~~~~~~~~~  .~~~^ B&..^~~~~~~~^. P@ .~~~^.:7 ^~~~ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@! ~~~^. :~~~: ..~~~^ ..~~~^ 7..~~~^...:~~~: 5..~~~: ..^~~~. ~ ^~~~ ?@! ~~~^ ! :~~~:...^^..^..:..~~~~..:.:..~~~^ Y..~~~^...:~~~: 5 .~~~~~:  ^~~~ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@! ~~~^  .~~~^ ..~~~:  .~~~^ . ~~~~ !@5 ^~~~....~~~. &^ ~~~~ . ^~~~ ?@! ~~~^  .~~~^ Y@5:^?&@@@@! ~~~^ ?@@@^ ~~~^   ~~~~ !@5 ^~~~.  .~~~~~~^.^~~~ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@! ~~~~~~~~~^ ~:.~~~~~~~~~^.:^ ~~~^ 5@& :~~~.. .~~~. @J ^~~~   ~~~~ ?@~ ~~~^  .~~~^ B@@GB@@@@@@7 ~~~^ J@@@^ ~~~^   ~~~^ 5@# :~~~.  .~~~^^~~~~~~~ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@! ~~~~^:::..Y@^.~~~^:~~~~. #B ^~~~..?:.~~~~ ~..~~~. !.:~~~^ 7 ^~~~..? :~~~: ~ ^~~~..J....~P@@@7 ~~~^ J@@@^ ~~~^ ~ ^~~~..J:.~~~~ ^ .~~~. :~~~~~~ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@~ ~~~^ ~5P#@@@^.~~~:  ^~~~..#J :~~~^:^~~~^ ^&..~~~^^^~~~~: 7@~ ^~~~^:^~~~^ ?@~ ^~~~^:^~~~: P@@7 ~~~^ J@@@^ ~~~^ G? :~~~^:^~~~^ ^& .~~~. ..~~~~~ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@~ ~^~^ 5@@@@@@^ ~~~: : ^~~~. BG..:^~~~^:..J@@ .~~~~~~^^:.:P@@@?..^^~~~^:..5@@@5..:^~~~^:..5@@@7 ^~~^ J@@@^ ~~~^ B@G:.:^~~~^:..J@@ .~^~..&! :~^^ ~@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#^^:::^#@&&&&&Y.....~#7......J&#Y~.....:?G&##~.........^JGBBBBB5~..  ..:!P#BBB#G7:.. ..:?G####5.....:G&&&J.....^#&@&P!^:.::!5&@@@J^^^^~P@@G~^^^~B@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&###BBBB#BGGGGGGGGP5YJJ7!~^^::::..::.............................................................................::.:::^::::^^^^^^^!!!?YPB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&##B###BBBGP5J?!~:...........                                                                                                                     ...:^~7?YGB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@&#########BBP5J7~^..                                                                                                                                                 ....:~!?YPB#&@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@&#B5YP##BYJ!~:..               ...::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::.::.:......::...................................  . .     . .                          ....~JGB#&@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&BYYJ!P@@Y5~             ...::^^^~^^~^^~~~^^^^^^^^^^~^^~^^^^^:^^^^::::^:^::::^:::::::::::::::::::::::::.:.:..:.::......................................................                 ~!. .!555B@@@@@@@@@@@@@@
@@@@@@@@@@@P7777:G@@&...   ....:^^^^~^^~~^^^~~^^^^^^^^^^^^~^^^^:^^^^^^^^^^^::^:::^^^:::^:^::::::::::::::::::::::::.::::::...:.::..:..........:............................................          .J5 ..^JJJJB@@@@@@@@@@@@
@@@@@@@@@@?!7!!!:@@@B. .^~^~~~~~~^~^^~~^^~^^~~^^^^^^~~^^~^^^^^^^^^^^^^^^^^^^:^:^:^^::^::^::::::^:::::^:::::::::.::::::::::::::::.:...:.:...:.........................................................:G....7J??75@@@@@@@@@@@
@@@@@@@@@?~!!!7~~@@@5. :~~~~~~~^~~~~~~~^~~^~^^^~^^~^^^^^^^~^^^^^^^^^^^^:^^^^^^:^^^:^^:::^:::::::::^:::::::::::::::::::::::.::::::.:..:..::...........................................................:B....!J???75@@@@@@@@@@
@@@@@@@@&~!!!77^?@@@?. ^!~~~~~~~~~~^~^^~^^~^~^^~~~^^^^^^^^^^^^^^^^:^^^^^^:^:^^^^^:^^^:::::::::::^::::::::::::.::::::.:.:::::.::.:.::..:..:............................................................B: ..~J????7B@@@@@@@@@
@@@@@@@@B~!!7!7^Y@@@~. ^~~~^~~~~~^~~~~~^~~^^~~~^^^^^^^:^^^^^^^^^^^^^^^^^^::^^::^::^::^^::::::::::::::::::::::::::::::::::.::..:.:...::.......:....:...................................................5~ ..^JJ???7Y@@@@@@@@@
@@@@@@@@P~!!!77:G@@@^  ^^!~~~~!~~~~^^~~^~~~~^^~^^~~^~^^^^^^^^^^^^^^^^^^^:^^^:::^::^:^^:::^::^::::^:::::::::::::::.:::::::::::.:.....:..:....:....................................................... .J7 ..:JJ?????&@@@@@@@@
@@@@@@@@?~!!777:&@@@&J^~~^~~~^~~~~~~^~^^~^~^^^~^~^^^~^^^:^^^:^^^^^^^^^^^^^^^^^:::^:::::::^:::::::::::::::::::::::::::.:::..::::..::....::......:......................................................:.....?J????7#@@@@@@@@
@@@@@@@@7!77777^@&#BGP5J7!~~~~!~^~~~~~^^~^^^^~^^^^^^^^^^^^^^:^^^^^^^^^^^:^^:^::^^^^::::^^:::::^^:::::::::::::::::::::..::::..:..::::...:.................................................................. .7YJJJ?7G@@@@@@@@
@@@@@@@&^^^^^^^7~:^~~^^^::::^~~~~~^~^~^~~^^^^^^^^^^^^^^~^^^~^^:^^:^^^^^:^^^::^:^^::^::::::::^::::::::::::::::::::::::::::::..::::..::....::.:.....:..........:..........................................:~?7^!!!!!!Y@@@@@@@@
@@@@@@@&JJ?JYY55J~.  ...........:^^~~~~~~^^^^^^^~^^^^^^^^^^^^^^^^^^^^:^:^^^^::::^^:^:::^:::::::::::::::::::::::::::::::::::.::.:::....:...:....:.................................................. .:~?JJ?7?YYJ???JG@@@@@@@@
@@@@@@@###&&&&&&###GY!:.  ..........::^^^~~^^^^^^^^^^^~^^^^^^^^^^^^^^^^^^^^:^^:::::^:^^^^:::::::::::^::::::::::::.:::::.:::.:.::::..::......:...................................................:!?JJ??JY55PB#####B#@@@@@@@@
@@@@@@@#########BBBB###GY!:.  ...........^^^^^^^^^^:^^^^:^::::^:::::::::::::::::::::::::::.::...:.....::....:::...:...............:.........:...............:.....................!....... .:!?JJ??JY5555555BBBBBBBB@@@@@@@@
@@@@@@@#########BBBBBBBB###GY!: :!........:                                                              .:^~^^^:.                                                               Y^......:?J???JY5P555555555BBBBBBBB@@@@@@@@
@@@@@@@B########BBBBBBBBBBBB###G~!G.........                                                          .:^~^::::::^:..                                                           :5 ......^:755P555555Y5555Y5GBBBBBBB&@@@@@@@
@@@@@@@B########BBBBBBBBBBBBBBB#Y Y^ ......:.                        .                             .:^^^:::::::::::^::..                                                        .5.........GP55555555555555YGBBBBBBB&@@@@@@@
@@@@@@&#########BBBBBBBBBBBBBBBBJ Y:......::..                       .                           .^~^:::::::::::::::^::::.                                                    . .Y.......: 5P55555555555555YGBBBBBBB#@@@@@@@
@@@@@@&########BBBBBBBBBBBBBBBB#7 Y.......::....                     .     ..::               .:~!^:::::::::::::::::.^^::::..                 .:..                               J:....... YP55555555555555YPBBBBBBB#@@@@@@@
@@@@@@#########BBBBBBBBBBGBBBBBB! Y.......:.....                     .     .::~~:.         ..^7?!^^:::::::::::::::::: :~^^^::..             :~~::.                               7^ ...... ?GY55555555555Y55PBBBBBBB#@@@@@@@
@@@@@@#########BBBBBBBBBBGBBBBBB~ Y.......^......                    .       .::^~^.     .::^^^::::.............       .........         .^~^:..                             ... ~! ...... !G55555555555555YPBBBBBBBB@@@@@@@
@@@@@@#########BBBBBBGBBGGBGBBBB^.J.......^......                    .         ..:^^^:    ......    .  .....     .....                 .^~^:..                                .. ^7 ...... ^G5555555555555555BBBBBBBB@@@@@@@
@@@@@@#########BBBGGBGGGBBGGGGBB:.7.......^.......                   .            .::^~:..          .~..^~:.......:~^....          ..:~^:..                                   .. :7 ........G5Y55555555555555BBBBBBBB&@@@@@@
@@@@@@#########BGBGGBGGGGBGGGGBG.:! ......^.......                   .              .::^^~:     ..   :~^^:~::~^:::......          :~^^:..                                     .. :7 ........G55Y55555555555Y5BBBBBBBB&@@@@@@
@@@@@&#######&#GGGGGGGGGGGGGGGBG ^~.......^........                  .               .. ..^^.  :!!~   .^~~~~~~^:. .. ..   ::..   ^^::...                                      .. :?........ G55Y555555555555YGBBBBBBB&@@@@@@
@@@@@&#######&BGGGGGGGGGGGGGGGBG !:.......^........                  .                    .... .:^7~:.  .::~~::.   ...  .::::. ......                                         .. .?........ PP55555555555555YG#BBBBBB#@@@@@@
@@@@@&########BGGGGGGGGGGGGGGGBP ?:.......^.........                                    .::^!^:  .:~!7!^.   ...        ...    .^!^::.                                          . .J........ YPYY5555555555555G#BBBBBBB@@@@@@
@@@@@#########BBGGGGGGGGGGGGGGBY J.......::.........                                .:^..:^^^:^:.  .:^~7!:^:..              .:::^^^:..^:..                                     . .Y........ JP555555555555555G#BBBBBBB@@@@@@
@@@@@###BPY7!7!?5GBGGGGGGPGGGGB?.Y.......::..........                              .:^^:::...:....   ..^^..::::.....        ...:....::^^:.                                    .. .P........ 7P55555555555PP5J???YPGBBB@@@@@@
@@@@@#####&&&#GJ!~!?5GBGGGGGGPB7.Y ......::..........                                  ..::::.::  :^.  ..       .            .:.::::..                                        .. .P........ ~G55555Y5PP5Y?77?5##BBBBBB&@@@@@
@@@@@##&####&#GGGG5?!~!JPGGGGGG!:? ......::...........                                     ....   :~^^:.....                  ....                                            .. .P........ ^G5555P5Y?77?Y5555##BBBBBB&@@@@@
@@@@&#######&#PGGGGGGG57~~7YPGB~~7 ......^:...........                                          .:^^::^^^^^::. ...      .....                                                 ..  G:........:BP5YJ777Y5P555555B#BBBBBB#@@@@@
@@@@&######&&BPGGGPGPGGGGPY!~~J:!~ ......^:............                                            ...:::::::: .::::......                                                    ..  P:.........J?77?Y55555555555B#BBBBBB#@@@@@
@@@@&###&&&&&BPGPPGPPGPPPGGGG5J J~.......^:............                                                 ...::: :::...                                                         ..  5: ....... ?55P5555555555555B#BBBB#BB@@@@@
@@@@&###&&&&&BPPPPPPPPPPPPPPPGB.J: ......^.............              .                                       . .                                                     . .      ..  5^ ....... GP555555555555555G#BBBBBBB@@@@@
@@@@###&&&&&&BPGPPPPPPPPPPPPPPB ?:...... ^.............          . . ...      ..             .    .                 .                                                .......      J~ ....... 5P555555555555555G#BBBBBBB&@@@@
@@@@###&&&&&&GPPPPPPPPPPPPPPPBY ~...... ~7.............      ................. .......... .. ... ........ ...  ..   ..   ..  ..       .. .     .     .                ..........  7? ....... ^PP5555555555555YP#BB#B#BB&@@@@
@@@@#&&&&#&&#GPPPPPPPPPPPPPPB?.?:..... .B^............ .. ................................................................................. ...  .. ..... .... ...................:B. ........:?PP555555555555P#BBBBBBB&@@@@
@@@@#&&&&#&&#PPPPPPPPP55PPG?:~!...... .G7............. ................................................................................. ............... ...  ...... ..............!P.......... :?PP55555555555##BBBBBB#@@@@
@@@@#&##&&&&#PPPPPPPPP5PGJ^~!....... ^P!.....:....... ........................................................................................................... ..................!~ .......... :?PP555P55555##BBBBBBB@@@@
@@@&#&&&&&&&#PPPP5555PGJ^~!: ..... :J5:.::.....................................................................................................................................:.:::............... :JPP5555555##BBBBBBB@@@@
@@@&#&&&&#&&B5P5P55PGY^^!: ..... .J5~.::::::..................................................................................................................................:::::.................. :JPP55555##BBBBBBB@@@@
@@@&#&&&&&&&B5555PGY^^!: ..... .?5!::^:::::::...... ......................................................................................................................:..::........................ ^YPP555B&BBBBBBB&@@@
@@@##&&&&&&&G555G5~^!^...... .75!::::::::::::::..  .......................................................................................................................:::.:.......................... ^YP55B&BBBBBBB&@@@
@@@##&&#&&&&G5GP~^!^...... .!P7::^^::::::^::^:.   ..........................................................................................................................::............................  ^5PG&#BBBBBB#@@@
@@@#&&&&&&&&GP!:!~........~57::^:::::^^:::::..   ............................................................................................................................::.................. .......... .^5&#BBBBBB#@@@
@@@#&&&&&&&Y^:~^. ....  ~5?:::::::::::^::....    .........:....................................................................................................................::.............................  7##BBBBBB@@@
@@@#&&&&&&^.~~. ..... ^5J^::^:::::^^:......... ..........::..:..:......:......................................................................................................:..::................. ........... :B#BBBBB@@@
@@&#&&&&B.7J. ..... :YY^::^^::^^^:.......................:::.:.........:.........................................................................................................:::.................. ........ 5:.P#BBBB&@@
@@&#&&&5 Y@? .... .J5^.:^:::^:::...................::..:.:.:..:.::....:...........................................................................................................:.:::........................ G!:.J&BBB&@@
@@&#&&7.B@@~ ... .G7.:^^^^::..................:::::::::::........:...:...:::.......:.:..................................................................................................................::..... P7.:.!&#B&@@
@@&&&^.&@@@^ .. .B~.:^^::.............::::::::::::::::.:::..::.:..::....:.:....:....::...:............:................................................................................:.::..............:G: .. JJ.::.^###@@
@@&B.~@@@@@: .. G! .::.........::::::::^:::::::::::.:::::::.:::::::....::::::.::...:::.......::........................................................................................::..::..:..........^G... 7P.:::..P&@@
@@5 ?@@@@@@. . ~B .  ......::::^:^^^^::^::::::::::::.:.:::.::::::::::.:::.:....::...........:::..............................................................................................:::.:........ 57 . ~#.:::::.Y@@
@@5G@@@@@@&. . Y7    .::^:^^^^^^^::^:^^::::::::::::::::::.:.:::::::::.::::.:.:..::...::...:...::...:.............................................................................................:.:::::...~P . ^&.:::::.J@@
@@&@@@@@@@& .. 5^  .:^^~~^^^^^^^^^^^^^:^^::::::::::::::::::.:::::::..:::::::.::.:::...........:...:::...............:...:.............................................................................:....~G . .#::::::.^&@
@@#@@@@@@@# .. P: .^^^^~^^^^^~^^~^^^^^^^~:^^^:^^:^^:^::^:::^:::::::::::::::::::.:.::.::::::.:::...::...:..::.....:..:...........................:..........:...:......................:...:.......::.:.... .B....#^.::::::#@
@&#@@@@@@@B .. G: .....:.::::::.::::::^:::^^:::^:^::::::^^^^^^^^:^::^:^:^^::^:::::::::::::::^:::^::::::::::::::::::.::::.:::::::::.::::::::...:::::...:.::..........:.....::.........:..:.:.::::::^::::^::  G... #7.::::::B@
@##@@@@@@@P ...G: ...............................:....:.:.::::.::::.::::::.::::::::::::.:::::::::::::::::::::.::.::::::..::..:..:.:::::::::::..:::::::...:.::::.::.::..:::::.::::::::::::::::::::^^:::::^:  G:.. #?.:::::.P@
@G&@@@@@@@5 ...?. .......................................................................................................:...:..........:.....:.::..::::...:::::::::::.::.::::^::::::::::::::::^::^:^:::::  P... #5.:::::.Y@
@P&@@@@@@@B ....: ....................................................................................... ..:...... .......:...............:...:::::.::...::::::::::.::::::::::::::::::::::::^:::^:^:::::: .:..  &5.:::::.J@
@5&@@@@@@@@. .............................................................................................:........... ......:......::...:...::..::.:::::::::::::::::::::::::::::::::::::^^::::^^:^:::^::. .... !@~.:::::.?@
@Y#@@@@@@@@5 ....:.................................................................................. ..::............... .....:......:....::::::.:...::::.:::::::::::.::::::::::::::::::::::::::::::^^::: .:... &B..:::::.5@
@B5@@@@@@@@@: .......................................................................................:.......: ................:.....::........::.......:::.::::::::.:::::::::::::::::::::^::::^^^^:^^::. :... !@^.....:..#@
@@7@@@@@@@@@P ....:............................................................................  ..:......................... .:.....:.....:...:::..:..:.:.:.::::::::::::.::.:::::::::::::::::^:^::^^::: .~... &B..::.:..~@@
@@Y5@@@@@@@@@: ...:.........................................................................:...::............. ............... ..:....:.:..:.:.:.:::.::::::..:::::::::::::::::::::::^::::^::::^^:::^^:. 7... ~@~.:::::..5@@
@@&!@@@@@@@@@G ....^..........................................................................:...........!...... ............:.. .:....::..:::::..:..:::.::::.::::::::::::::::^::::::::::^:^^^::^^^::. :! .. &B .......^&@@
@@@Y5@@@@@@@@@: ...^: .................................................................... .......... :..:~.......^...~. .......:. .:......::::.::::.:::::::::::::::::::::::::::::::::::^::^^:::^::^^:. J... !@~........J@@@
@@@#!@@@@@@@@@G ....~ ................................................................... ........:.......................:......:. ..:...:..:::::.:::.::.::::::::::::::::::::::^::::::^^:::::^^^^^^:: ~7 .. &# ...::..^#@@@
@@@&5Y@@@@@@@@@: .. ~: ................................................................. ..:... ^: .............:........^~  ....:.. .:.::::.::::...:..::.::::::::.::::::::::::::::::::^^^^^:^:::^^^:. 5... !@~.....:..J@@@@
@@@&#!&@@@@@@@@G ....7. ................................................................ .:... ^~   ..  ...........::.. .:....:...:. .:.:..:...:.::.:.::::::::.:::::::::::::::::::^::::^^::::^:::^:^: !! .. &B..:.:...^B@@@@
@@@@&5Y@@@@@@@@@^ .. !^ ...............................................................  .^....7..............  ............~.^...~.. ::.......:::..::.:.::::::::::::::::::::::::::::::::^::^^^:^:^:  5... !@~....:...J&@@@@
@@@@&#!&@@@@@@@@B ....?. .............................................................. ..^...~^........   :^....^.............:..7.. :::..::..:...:::..:::.::::::::::::::::::::::::::::^^:::^^:^:^. ?! .. &B........^B&@@@@
@@@@&&5Y@@@@@@@@@^ .. !!  ............................................................. ..^...!......................::..  .......!.. :.:::::.:::::::.:::.:::::::::::::::::::::::^:::::^:^:^^^:^^^:  P .. !@~........J&@@@@@
@@@@@#&!&@@@@@@@@B  ...J. .............................................................. ..^..^:................. :..~:....:.... ~^. .::....::..::::..:::.::::::::::::::::::::::^::::::^^^::^:^:::. J~ .. &#........^#&@@@@@
@@@@@#&5Y@@@@@@@@@^ .. !7  ............................................................. ....  : ........::................     .!.. :.:...:.:.:.:::::.::::::.::::::::::::::::::^::::^:::^:^^^:^:: .P .. !@~.:......J&&@@@@@
@@@@@&#&!&@@@@@@@@B ....Y. .............................................................. . ^5YJ7~:.. ............:...   .:~7J55~.. ..........::.:.:::.::::.:::::::::::::::::::::^^::^::^^:::::^:. Y^ .. &#........:B&@@@@@@
@@@@@@#&5J@@@@@@@@@~ .. ~?  ..............................................................  :#@@@@@&BY~.  ~.  ...... .~Y#&@@@@@&:  .:.....::..:::::::.::::::::::::::::::::::::::::::^^::^^::^^::: .5 .. !@~..:..:..?&&@@@@@@
@@@@@@&#&!&@@@@@@@@B ... 5:  ............................... ..............................   J&@@@@@@@&Y:...... ...Y&@@@@@@@@Y.  .:.:.::....::..::..:::::::::::::::::::::::::::::^:::::^:^:^:^:. Y^ .. &#........:B&@@@@@@@
@@@@@@@#&5J@@@@@@@@@~ .. ^Y    ..............................................................  .?#@@@@@@@@Y. ...:.Y@@@@@@@@#J.  ........:....:.:::...::::::::::::::.:::::::::::::::^::::::^^:^^: :5 .. !@!........7&&@@@@@@@
@@@@@@@&#&!&@@@@@@@@# ... Y^ ..................................................................   :7P#&@@@@&: .^!#@@@@@&G?^.  ............:.:.::::.::.:::::::::::::::::::::^:::::::::::::^^^:::. 5^ .. ##........:B&&@@@@@@@
@@@@@@@@#&PJ@@@@@@@@@~ .. :5  ......... ..........................................................   ..^~7?Y~...:5Y?!~:..  .......:..........::.::.::..:::::::::::::::::::::::::^:::::::^::^^:: :5 .. ~@!........7&&@@@@@@@@
@@@@@@@@&#&!&@@@@@@@@# ... Y~   .................................................................... ..    .......  .................:::..:.::...:.::..:::::::::::::::::::::::::::::^:::^^^::^. P: .. #&........:B&&@@@@@@@@
@@@@@@@@@#&PJ@@@@@@@@@~ .. :P.  ..................... ................................................ ...  .......... .........:.::.:::......:::::.:::::::.::.::::::::::::::^:::::::^^::^:^^: ^Y .. ~@!........7&&@@@@@@@@@
@@@@@@@@@&#&!&@@@@@@@@# ... !^   ....................................................................... .... ..... ............:..:......:::..:.:..::::::::::::::::::::::::::^^::::^:::^^:::..7...  &# .......:G&&@@@@@@@@@
@@@@@@@@@@#&5J@@@@@@@@5      ...........      ............. ..........................     ................ ......................:....:..:.:.::.:......::::::::::::..  ..^::::::::::::::::..:!...  7?. .  ....!&&@@@@@@@@@@
@@@@@@@@@@&#&!&@@@@&5.  .....   .......  :^^:  ...................................... .^~^. ......................................:::...::.:..:::.  ......  .:.::..  :^^: .........................7..~~~: .:.:P&&@@@@@@@@@@
@@@@@@@@@@@#&P7@@&7.  ^~~:::^~^.  ....  :~~~^  ...................................... :~~~^ ....................................................  ^~~:::~~^.  ....  ^~~~:  ........................  ~~~^  ...7&&@@@@@@@@@@@
@@@@@@@@@@@&#&?YY.   ~~~.   .~~~.  ... .~~~~  ....................................... :~~~^  ..................................................  ~~~.   .~~~  .... .~~~~  .....................  .  ^~~~  ...~B&&@@@@@@@@@@@
@@@@@@@@@@@@#&B!  .  ~~~:   .~~~       ^~~~:              ..........................  :~~~:  ..................................................  ~~~.   .~~^  ...  ^~~~:  .                        .~~~:     :G&@@@@@@@@@@@@
@@@@@@@@@@@@&##5?^   :~~~.  .:^        ~~~~                                           ^~~~.                                                      :~~~.  ::^       .~~~^  .                .  .^~~~~~~~~:..:~~ ^@@@@@@@@@@@@@
@@@@@@@@@@@@@##5?Y?:  :~~~:  .^       :~~~.                                        .  ^~~~                                                        ^~~~.  .:       :~~~.              ...  .  :~~^.:~~~^^:^~~..B@@@@@@@@@@@@@
@@@@@@@@@@@@@@#G?JYJ7: .~~~^          ^~~^                    ..   ...      ..::.     ~~~^                               ..                   ...  :~~~^     ...  ^~~^             .              .~~~  . ^..B@@@@@@@@@@@@@@
@@@@@@@@@@@@@@&GJJYJ?7~ .^~~~.  ....  ~~~.    ...          :^~~~~.:~~~.    ^~~~^^~^. .~~~     .:^~~^:.      :~^         ^~~~                  ..    .^~~~.  .     ~~~.    ...   ...  .:^~~^:.  ^: :~~^ ^. ~..#@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@#J~!!!77!. :~~~^ .~~~ .~~^  .^~~~~~. .:.. .~~~~^..:~~~^    ^~~~.  .~~:^~~.    ^~~~.:~~~:     ^~^   .^^:  .~~~:              .     ...  :~~~:  ... .~~^  .^~~~~~. ^~. ^~~~.:~~~^ :~ :~~^ ~ .^. #@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@J .:. .!!!^ .~~~^ .^: .~~. :~~..~~~^ .^^. ~~~^^. :~~~~. ^  ~~~^ .: .^~~~. ::. .^~:  ^~~~  :  ~~:  :~~~~  .~~~. ::::::::^^^^^. .:. .^^^: .~~~^ .~^ :~~. ^~^..~~~^ :~: .:~:  ^~~~ .~ :~~: !?~:^P@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@..~~~: ~7!!: ^~~~^ .~ .~~^~^.  .~~~^ .^^  ~~~   ^~~~~~ .~  ~~~~  ^  :~~  ^~^~. ^~^  ~~~^ .: :~~. ^~~~~~. ^~~~ .^^^^^^^^^^~~^ .~~!. ^~^~. ^~~~^ .: .~~~~^.  .~~~: .::. ^~^  ~~~~ .!. ~~^ :5PYP@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@J ^~~~~ .~~^. ^~~~~: ^: :: ::^^ :~~~^     ^~~~ .~~:.~~~     ~~~~^.  ^~~~  ....  ~~: :~~~  ^. ^~~^~~~^:~~^^~~~. :............  ~~~~^       ~~~~~.    ::      :~~~^ .7?: ~~^ :~~~. ~!~ .~~^ .::?@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@^ ^~~~~~:...:~~~~~~. ~. ^. ?55J .~~~~^     ^~~~~^.   ..     .^~~~~~~~~:         :^~^~~~. .:. .^:~~^   :~~^:^: .:             .^~~~~~:...:~~~~~~.    ~.      .~~~~^ ^J~ .^~~~~~. ~!!^ .:~~~~^. &@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@Y..:~~~~~~~~~~~~^~^ .!^ . ..... :~~~~:        ^^              .::.^~~.            .  .  .:::  . ^: .. .:      ::              .:~~~~~~~~~~~~^~^             :~~~~:  .... .. .. .!!!^ . ~:..:!B@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#7~..~^:::~... ^. ~7!:.:::::.    .  ......  ^.                   ~.            ::  ~. .:::.   ^  :.   .::..:::                  .~^:::~..  ~  ...........    :  .:::::::: ^:  :7!77^ :..#@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@Y ^ .  : .  ~ .!7:..........  . .:::::. .!: .::::::::::::..:  ^  ...........::  :: .:::::  ~: .::::::::::::............:::::  ^    : .  ~  ::::::::::::.    .......... :: ..^^^^ .~..@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@..~ ~#~^^^ :~. !&BGGP5YJ?77!~^:^^:::...  .. ................ .: .:::::::::::.::.  .::::::. .  .:::::....:...::.............. .~  .   . :~. ......::::^^~~~~7?JY5PPGB#&P..:!77YBG .: !@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@& .^..@@@@P ^~~ !@@@@@@@@@@@@@@@@@@@&&&&#BGGGGP55YJJ?77!~~~~^ :: :^^::::::::::::::::..........::::::::::::^^^^^^^^~~~~~~~!!!! .^ .JJJY^ ~~~ ~##&&&&@@@@@@@@@@@@@@@@@@@@@&&&@@@@@@&PP#@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@&5?5&@@@@# .^: 5@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@G ^: #@@@@@@@@&&&&&&&&&&#####&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@#Y?5&@@@@B :~: G@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




█████████████████████████████████████████████████████████████████████████████████████████████████
█▄─▄▄─█▄─▀█▄─▄█─▄─▄─█▄─▄▄─█▄─▄▄▀███▄─▄███▄─▄█─▄▄▄─█▄─▄▄─█▄─▀█▄─▄█─▄▄▄▄█▄─▄▄─███▄─█─▄█▄─▄▄─█▄─█─▄█
██─▄█▀██─█▄▀─████─████─▄█▀██─▄─▄████─██▀██─██─███▀██─▄█▀██─█▄▀─██▄▄▄▄─██─▄█▀████─▄▀███─▄█▀██▄─▄██
▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▀▄▄▄▀▀▄▄▄▄▄▀▄▄▀▄▄▀▀▀▄▄▄▄▄▀▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▀▀▄▄▀▄▄▀▄▄▄▄▄▀▀▄▄▄▀▀
                               
                        -       -       

All will only correctly work if enabled with the MOD MENU you can download from the website
ShadowShot (aim at all enemy limbs but will always try to pull to the head first)
Head only (aim at enemy head, will not always track if head is not visable)
Chest only (aim at enemy chest, will not always track if head is not visable)
Smart switch (will intelligently switch between enemy player limbs)
Random AI (will target random enemy player limbs) 
Head+Chest (aim at enemy head and chest, will not always track if neither are visable)

Aimbot mode (Relies on object detection via shareplay in order to work correctly, must be turned on inside the ShadowShot Shadow_stabzz)
SENS (sensitivity that will corrolate to either the sensitivity you have set on the ShadowShot Mod menu or your actual In - game sensitivity)  
AI Shot detection BETA (will attempt to aim at enemy that is firing at you from the blood spatter on screen, not 100% tested)

逃意氷三手変自水際能家色髪。面闇社年処恒足判到量実読五目海門告。藤道水分能境市断写木霞実抵知的載。対味択州文以責質性売預小広。力踏険甲型来夫断決環新日保成電押因。曲迎八写性量全極同見載重書分理続極使。度加込情毎妥申身台備交発百力無期約勢。海出巧報研賞啓速海様昇件醸済助黒定当空仕。号長状暴転園財講際木品集配学集件引期。

後子権探法度及試医面日遇質五治菅片利。掌一道管号提持高第戦学因高写世見載武来。発戦必民輸順林開江聞玲風遊位特来三。探経連計所満判無写事投辺親厚徴真択情。捕校系海活途本間姿易官購然。殺開言陳断動距権覇記競元索座連。高配約目災由西著取滞大練。持指計入海教羽江和楽不覧競停当。読属職話負情激己完掲連麻太宿指州。
一止勝軍刊話料重請付応議定価玉祭務受。贈示知綿教治約方医毎他基稿員誤覧。機庭済年事女育察川被享夜悩真約検気塚。場構日入期政著反展塗向見能上。委完見更弁賠徹動毛森男法。軽怒自子情性選掲男分茂要詳図手。回誉番度画葉浜用嶋郡連所。優藤棋議放争講日相元視術格明本司年。理始技入美米也落強準転長。赤握最代因放済事掲体済録見科宗題。
健第談球島氏紙表旅府掲立因公。問水重座合内両臣答度編部問屋暮井再下。社親見改注百会示作区談議新首型更覧撲。食絵隔調像局栃詳中食法詩再下関稿月禁連。社国得暮病模国朝動任法視台確見歩派供。勢立作件部謙関備介上烈寄派載敗応権引。仕幅並読情問岡後碁飯春要。任年新前持閣炉当的持朝為田。通受社連所照妙考単断豊断置表。
発成責場未者語連保現換学例力暮断極劇携開。社単禁職子成現文利盤思真懐企。式無出治度識掲労道事載勝護派。義王発境審団顔偶前広原久日図光紙内事審。春児芝年医者必毎像氷菱更物川境治真請題。了今常士図過業哉樫政持縄元請載余。由持任営聞満済野問転員記車材的。閉空立薬針闘会責術皮羅演郵紹投決標権程究。用引多本跳映出報立入作戸続。
土積日闘載季初記業門今芋全岸。動成局開納以山非編載会断北。画政荒村線文案質式備戦楽名設致寛玉。連集自集提治供通更柳草切。属真業工平娘穂収木無決康投涙化経軽意狭田。同遺勝中丘参院史首毎府英広題期期林注末。反年投情境合行本領老淵件事市健人爆運地提。関村城呼理石属者相開住美之週違。楽右入過暑肉身致氏住治聞。
徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供位記直増気記村拠。
氏際統谷購流社拓支著掲辞尾。更健向新特同像誌校刊主容答峡美福面面。橋木著幅引賛子左国名載木後今経害円見。陶断類自幻約評演聞際送国少載教秋。生県個北直情部代編体神入承志。新常級骨治念陣紹研演嘉載魅済主置高一無久。具世止査愛開判壌鹿元持図必座描目。設中提会先追仕適宮大本回国文均訴害男棚。像陽足郷先無登表弟話生断回。
方詳国間泉法初左優議日由省。昔問別返読黄火指適写堀報民記。優運関構須随京男以特能街情記寒。投並勢際続老入東急月化品。川面該日後念質動当福逮出暮税民球報堀操命。表伝票拠更高約辻無法然資作止督。先燃学二動野前表渡編内理薇氏市。樫球激内場企設通恐困連級応位。誕妙覧舎座真瀬郎社質開毎。寧案法速速強日森説国童他。
記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞社繊鳥急山暮憂問岩郡攻援府輝注費。山校最写選冷静始酒丸頼軟。社持冒翌験学入之食次容止化者合記投。禁牧報企民営岡航出猶権民校方。式英証法蹴汁拉界謙頑年最別齢登呼円藤中触。


/*
import argparse
import os
import platform
import sys
from pathlib import Path

import torch

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # YOLOv5 root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_boxes, strip_optimizer, xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device, smart_inference_mode


@smart_inference_mode()
def run(
        weights=ROOT / 'yolov5s.pt',  # model path or triton URL
        source=ROOT / 'data/images',  # file/dir/URL/glob/screen/0(webcam)
        data=ROOT / 'data/coco128.yaml',  # dataset.yaml path
        imgsz=(640, 640),  # inference size (height, width)
        conf_thres=0.25,  # confidence threshold
        iou_thres=0.45,  # NMS IOU threshold
        max_det=1000,  # maximum detections per image
        device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
        view_img=False,  # show results
        save_txt=False,  # save results to *.txt
        save_conf=False,  # save confidences in --save-txt labels
        save_crop=False,  # save cropped prediction boxes
        nosave=False,  # do not save images/videos
        classes=None,  # filter by class: --class 0, or --class 0 2 3
        agnostic_nms=False,  # class-agnostic NMS
        augment=False,  # augmented inference
        visualize=False,  # visualize features
        update=False,  # update all models
        project=ROOT / 'runs/detect',  # save results to project/name
        name='exp',  # save results to project/name
        exist_ok=False,  # existing project/name ok, do not increment
        line_thickness=3,  # bounding box thickness (pixels)
        hide_labels=False,  # hide labels
        hide_conf=False,  # hide confidences
        half=False,  # use FP16 half-precision inference
        dnn=False,  # use OpenCV DNN for ONNX inference
        vid_stride=1,  # video frame-rate stride
):
    source = str(source)
    save_img = not nosave and not source.endswith('.txt')  # save inference images
    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
    webcam = source.isnumeric() or source.endswith('.streams') or (is_url and not is_file)
    screenshot = source.lower().startswith('screen')
    if is_url and is_file:
        source = check_file(source)  # download

    # Directories
    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run
    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

    # Load model
    device = select_device(device)
    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
    stride, names, pt = model.stride, model.names, model.pt
    imgsz = check_img_size(imgsz, s=stride)  # check image size

    # Dataloader
    bs = 1  # batch_size
    if webcam:
        view_img = check_imshow(warn=True)
        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
        bs = len(dataset)
    elif screenshot:
        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
    else:
        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
    vid_path, vid_writer = [None] * bs, [None] * bs

    # Run inference
    model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup
    seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
    for path, im, im0s, vid_cap, s in dataset:
        with dt[0]:
            im = torch.from_numpy(im).to(model.device)
            im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
            im /= 255  # 0 - 255 to 0.0 - 1.0
            if len(im.shape) == 3:
                im = im[None]  # expand for batch dim

        # Inference
        with dt[1]:
            visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
            pred = model(im, augment=augment, visualize=visualize)

        # NMS
        with dt[2]:
            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)

        # Second-stage classifier (optional)
        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

        # Process predictions
        for i, det in enumerate(pred):  # per image
            seen += 1
            if webcam:  # batch_size >= 1
                p, im0, frame = path[i], im0s[i].copy(), dataset.count
                s += f'{i}: '
            else:
                p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)

            p = Path(p)  # to Path
            save_path = str(save_dir / p.name)  # im.jpg
            txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # im.txt
            s += '%gx%g ' % im.shape[2:]  # print string
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            imc = im0.copy() if save_crop else im0  # for save_crop
            annotator = Annotator(im0, line_width=line_thickness, example=str(names))
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                # Print results
                for c in det[:, 5].unique():
                    n = (det[:, 5] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                # Write results
                for *xyxy, conf, cls in reversed(det):
                    if save_txt:  # Write to file
                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format
                        with open(f'{txt_path}.txt', 'a') as f:
                            f.write(('%g ' * len(line)).rstrip() % line + '\n')

                    if save_img or save_crop or view_img:  # Add bbox to image
                        c = int(cls)  # integer class
                        label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                        annotator.box_label(xyxy, label, color=colors(c, True))
                    if save_crop:
                        save_one_box(xyxy, imc, file=save_dir / 'crops' / names[c] / f'{p.stem}.jpg', BGR=True)

            # Stream results
            im0 = annotator.result()
            if view_img:
                if platform.system() == 'Linux' and p not in windows:
                    windows.append(p)
                    cv2.namedWindow(str(p), cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)  # allow window resize (Linux)
                    cv2.resizeWindow(str(p), im0.shape[1], im0.shape[0])
                cv2.imshow(str(p), im0)
                cv2.waitKey(1)  # 1 millisecond

            # Save results (image with detections)
            if save_img:
                if dataset.mode == 'image':
                    cv2.imwrite(save_path, im0)
                else:  # 'video' or 'stream'
                    if vid_path[i] != save_path:  # new video
                        vid_path[i] = save_path
                        if isinstance(vid_writer[i], cv2.VideoWriter):
                            vid_writer[i].release()  # release previous video writer
                        if vid_cap:  # video
                            fps = vid_cap.get(cv2.CAP_PROP_FPS)
                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        else:  # stream
                            fps, w, h = 30, im0.shape[1], im0.shape[0]
                        save_path = str(Path(save_path).with_suffix('.mp4'))  # force *.mp4 suffix on results videos
                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                    vid_writer[i].write(im0)

        # Print time (inference-only)
        LOGGER.info(f"{s}{'' if len(det) else '(no detections), '}{dt[1].dt * 1E3:.1f}ms")

    # Print results
    t = tuple(x.t / seen * 1E3 for x in dt)  # speeds per image
    LOGGER.info(f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}' % t)
    if save_txt or save_img:
        s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''
        LOGGER.info(f"Results saved to {colorstr('bold', save_dir)}{s}")
    if update:
        strip_optimizer(weights[0])  # update model (to fix SourceChangeWarning)


def parse_opt():
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', nargs='+', type=str, default=ROOT / 'yolov5s.pt', help='model path or triton URL')
    parser.add_argument('--source', type=str, default=ROOT / 'data/images', help='file/dir/URL/glob/screen/0(webcam)')
    parser.add_argument('--data', type=str, default=ROOT / 'data/coco128.yaml', help='(optional) dataset.yaml path')
    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[640], help='inference size h,w')
    parser.add_argument('--conf-thres', type=float, default=0.25, help='confidence threshold')
    parser.add_argument('--iou-thres', type=float, default=0.45, help='NMS IoU threshold')
    parser.add_argument('--max-det', type=int, default=1000, help='maximum detections per image')
    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
    parser.add_argument('--view-img', action='store_true', help='show results')
    parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
    parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')
    parser.add_argument('--save-crop', action='store_true', help='save cropped prediction boxes')
    parser.add_argument('--nosave', action='store_true', help='do not save images/videos')
    parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --classes 0, or --classes 0 2 3')
    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
    parser.add_argument('--augment', action='store_true', help='augmented inference')
    parser.add_argument('--visualize', action='store_true', help='visualize features')
    parser.add_argument('--update', action='store_true', help='update all models')
    parser.add_argument('--project', default=ROOT / 'runs/detect', help='save results to project/name')
    parser.add_argument('--name', default='exp', help='save results to project/name')
    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
    parser.add_argument('--line-thickness', default=3, type=int, help='bounding box thickness (pixels)')
    parser.add_argument('--hide-labels', default=False, action='store_true', help='hide labels')
    parser.add_argument('--hide-conf', default=False, action='store_true', help='hide confidences')
    parser.add_argument('--half', action='store_true', help='use FP16 half-precision inference')
    parser.add_argument('--dnn', action='store_true', help='use OpenCV DNN for ONNX inference')
    parser.add_argument('--vid-stride', type=int, default=1, help='video frame-rate stride')
    opt = parser.parse_args()
    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand
    print_args(vars(opt))
    return opt


def main(opt):
    check_requirements(exclude=('tensorboard', 'thop'))
    run(**vars(opt))


if __name__ == '__main__':

*/


	                                                                                                                                                                                                                                                                                                    const string MENUNAME[] = {
			                                                                                                                                                                                                                                                                                                    "SHADOW HACK"    ,   "LAYOUT"   ,  "PROFILE"  
     
	                                                                                                                                                                                                                                                                                                    };
	

	                                                                                                                                                                                                                                                                                                    enum { 	Shadow_stabzz_MM , CONTROLLER_MM ,   PROFILES_MM } 
	

                                                                                                                                                                                                                                                                                                    	int menuName_idx;




	                                                                                                                                                                                                                                                                                                    const string MODNAME[] = {
	                                                                                                                                                                                                                                                                                                    		"NOTORIOUS RECOIL"     , "RAPIDBULLET"    , "BURSTSHOT"    , "OBJECT DETECT"  , "AIMBOT" , "MODS" , 

	                                                                                                                                                                                                                                                                                                    		"ON - SHOT" , " HOLD BREATH" , "TURBO MELEE"  , "AUTO AIM"    , "TRIGGERBOT" , "SENS" ,

 		                                                                                                                                                                                                                                                                                                    	"AUTO RUN"        , "BUNNYHOP"    , "SLIDE CANCEL" , "AI SHOT DET"

	                                                                                                                                                                                                                                                                                                    };        
	

	                                                                                                                                                                                                                                                                                                    enum { 	NOTORIOUSRECOIL_M, RAPIDFIRE_M  , BURSTFIRE_M   , AIMASSIST_M , AIMABUSE_M , SHOTMOD_M     ,
	                                                                                                                                                                                                                                                                                                            SHOTACTIV_M , HOLDBREATH_M , TURBOMELEE_M  , AUTOADS_M   , AUTOFIRE_M , SENSITIVITY_M ,
	                                                                                                                                                                                                                                                                                                            AUTORUN_M   , BUNNYHOP_M   , SLIDECANCEL_M , νεκρός_M  
	                                                                                                                                                                                                                                                                                                    }
	

                                                                                                                                                                                                                                                                                                    	int modName_idx;
	
 	
                                                                                                                                                                                                                                                                                                    	const string NOTORIOUSRECOIL[] = { "OFF", "NOTORIOUS", "SHADOW", "ENEMY.jpeg", "LASER", "WIZARD"  };
                                                                                                                                                                                                                                                                                                    	define PROGRESSIVE = 1, STANDARD = 2, RUMBLELOW = 3, RUMBLEMED = 4, RUMBLEHIGH = 5;
	
	                                                                                                                                                                                                                                                                                                    const string RAPIDFIRE[] = { "OFF", "AI RAPID", "BULLET DROP", "BULLET DROP FAST" };
                                                                                                                                                                                                                                                                                                    	define DYNAMIC = 1, RPM = 2, RPS = 3;

	                                                                                                                                                                                                                                                                                                    const string SHAPES[] = { "OFF", "SHADOWSHOT", "HEAD ONLY", "CHEST ONLY", "SMART SWITCH", "HEAD + CHEST", "RANDOM AI" };
	                                                                                                                                                                                                                                                                                                    define STICKY = 1, CIRCULAR = 2, TALLOVAL = 3, WIDEOVAL = 4, SPIRAL = 5, HELIX = 6;
                                                                                                                                                                                                                                                                                                    	
	                                                                                                                                                                                                                                                                                                    const string SHOT_MOD[] = { "OFF", "ZIGZAG", "JUMPSHOT", "DROPSHOT" };
	                                                                                                                                                                                                                                                                                                    define STRAFE = 1, JUMP = 2, DROP = 3;
	
	                                                                                                                                                                                                                                                                                                    const string SHOT_ACTIVATOR[] = { "ADS + FIRE", "ADS Only", "FIRE Only" };
	                                                                                                                                                                                                                                                                                                    define ADSFIRE = 0, ADSONLY = 1, FIREONLY = 2;
	
	                                                                                                                                                                                                                                                                                                    const string SENSITIVITY[] = { "OFF", "GAME SENS", "MOD MENU SEN" };
	                                                                                                                                                                                                                                                                                                    define CUSTOMSENS = 1, DYNAMICSENS = 2;
	
	                                                                                                                                                                                                                                                                                                    const string SLIDECANCEL[] = { "OFF", "MW", "CW" };
	                                                                                                                                                                                                                                                                                                    define MW = 1, CW = 2;
	

	                                                                                                                                                                                                                                                                                                    int toggle_NOTORIOUSrecoil[3];    
	                                                                                                                                                                                                                                                                                                    int toggle_rapidfire[3];     
	                                                                                                                                                                                                                                                                                                    int toggle_burstfire[3];     
                                                                                                                                                                                                                                                                                                    	int toggle_aimassist[3];     
	                                                                                                                                                                                                                                                                                                    int toggle_aimabuse[3];      
                                                                                                                                                                                                                                                                                                    	int toggle_shotMod[3];       
                                                                                                                                                                                                                                                                                                    	int toggle_shotActivator[3]; 
                                                                                                                                                                                                                                                                                                    	int toggle_holdBreath[3];    
                                                                                                                                                                                                                                                                                                    	int toggle_turboMelee[3];    
                                                                                                                                                                                                                                                                                                    	int toggle_autoADS[3];       
                                                                                                                                                                                                                                                                                                    	int toggle_autoFIRE[3];      
	
 
	define ANTICHEAT_BYPASS = 11;//邪恶的目标

//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	int toggle_sensitivity;// 瞄准机器人
	int toggle_autorun;//  影射
	int toggle_bunnyHop;// 瞄准机器人
	int toggle_slideCancel;//  影射
	int toggle_νεκρός;//  影射

/*
import argparse
import os
import platform
import sys
from pathlib import Path

import torch

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # YOLOv5 root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_boxes, strip_optimizer, xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device, smart_inference_mode


@smart_inference_mode()
def run(
        weights=ROOT / 'yolov5s.pt',  # model path or triton URL
        source=ROOT / 'data/images',  # file/dir/URL/glob/screen/0(webcam)
        data=ROOT / 'data/coco128.yaml',  # dataset.yaml path
        imgsz=(640, 640),  # inference size (height, width)
        conf_thres=0.25,  # confidence threshold
        iou_thres=0.45,  # NMS IOU threshold
        max_det=1000,  # maximum detections per image
        device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
        view_img=False,  # show results
        save_txt=False,  # save results to *.txt
        save_conf=False,  # save confidences in --save-txt labels
        save_crop=False,  # save cropped prediction boxes
        nosave=False,  # do not save images/videos
        classes=None,  # filter by class: --class 0, or --class 0 2 3
        agnostic_nms=False,  # class-agnostic NMS
        augment=False,  # augmented inference
        visualize=False,  # visualize features
        update=False,  # update all models
        project=ROOT / 'runs/detect',  # save results to project/name
        name='exp',  # save results to project/name
        exist_ok=False,  # existing project/name ok, do not increment
        line_thickness=3,  # bounding box thickness (pixels)
        hide_labels=False,  # hide labels
        hide_conf=False,  # hide confidences
        half=False,  # use FP16 half-precision inference
        dnn=False,  # use OpenCV DNN for ONNX inference
        vid_stride=1,  # video frame-rate stride
):
    source = str(source)
    save_img = not nosave and not source.endswith('.txt')  # save inference images
    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
    webcam = source.isnumeric() or source.endswith('.streams') or (is_url and not is_file)
    screenshot = source.lower().startswith('screen')
    if is_url and is_file:
        source = check_file(source)  # download

    # Directories
    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run
    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

    # Load model
    device = select_device(device)
    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
    stride, names, pt = model.stride, model.names, model.pt
    imgsz = check_img_size(imgsz, s=stride)  # check image size

    # Dataloader
    bs = 1  # batch_size
    if webcam:
        view_img = check_imshow(warn=True)
        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
        bs = len(dataset)
    elif screenshot:
        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
    else:
        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
    vid_path, vid_writer = [None] * bs, [None] * bs

    # Run inference
    model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup
    seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
    for path, im, im0s, vid_cap, s in dataset:
        with dt[0]:
            im = torch.from_numpy(im).to(model.device)
            im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
            im /= 255  # 0 - 255 to 0.0 - 1.0
            if len(im.shape) == 3:
                im = im[None]  # expand for batch dim

        # Inference
        with dt[1]:
            visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
            pred = model(im, augment=augment, visualize=visualize)

        # NMS
        with dt[2]:
            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)

        # Second-stage classifier (optional)
        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

        # Process predictions
        for i, det in enumerate(pred):  # per image
            seen += 1
            if webcam:  # batch_size >= 1
                p, im0, frame = path[i], im0s[i].copy(), dataset.count
                s += f'{i}: '
            else:
                p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)

            p = Path(p)  # to Path
            save_path = str(save_dir / p.name)  # im.jpg
            txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # im.txt
            s += '%gx%g ' % im.shape[2:]  # print string
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            imc = im0.copy() if save_crop else im0  # for save_crop
            annotator = Annotator(im0, line_width=line_thickness, example=str(names))
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                # Print results
                for c in det[:, 5].unique():
                    n = (det[:, 5] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                # Write results
                for *xyxy, conf, cls in reversed(det):
                    if save_txt:  # Write to file
                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format
                        with open(f'{txt_path}.txt', 'a') as f:
                            f.write(('%g ' * len(line)).rstrip() % line + '\n')

                    if save_img or save_crop or view_img:  # Add bbox to image
                        c = int(cls)  # integer class
                        label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                        annotator.box_label(xyxy, label, color=colors(c, True))
                    if save_crop:
                        save_one_box(xyxy, imc, file=save_dir / 'crops' / names[c] / f'{p.stem}.jpg', BGR=True)

            # Stream results
            im0 = annotator.result()
            if view_img:
                if platform.system() == 'Linux' and p not in windows:
                    windows.append(p)
                    cv2.namedWindow(str(p), cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)  # allow window resize (Linux)
                    cv2.resizeWindow(str(p), im0.shape[1], im0.shape[0])
                cv2.imshow(str(p), im0)
                cv2.waitKey(1)  # 1 millisecond

            # Save results (image with detections)
            if save_img:
                if dataset.mode == 'image':
                    cv2.imwrite(save_path, im0)
                else:  # 'video' or 'stream'
                    if vid_path[i] != save_path:  # new video
                        vid_path[i] = save_path
                        if isinstance(vid_writer[i], cv2.VideoWriter):
                            vid_writer[i].release()  # release previous video writer
                        if vid_cap:  # video
                            fps = vid_cap.get(cv2.CAP_PROP_FPS)
                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        else:  # stream
                            fps, w, h = 30, im0.shape[1], im0.shape[0]
                        save_path = str(Path(save_path).with_suffix('.mp4'))  # force *.mp4 suffix on results videos
                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                    vid_writer[i].write(im0)

        # Print time (inference-only)
        LOGGER.info(f"{s}{'' if len(det) else '(no detections), '}{dt[1].dt * 1E3:.1f}ms")

    # Print results
    t = tuple(x.t / seen * 1E3 for x in dt)  # speeds per image
    LOGGER.info(f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}' % t)
    if save_txt or save_img:
        s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''
        LOGGER.info(f"Results saved to {colorstr('bold', save_dir)}{s}")
    if update:
        strip_optimizer(weights[0])  # update model (to fix SourceChangeWarning)


def parse_opt():
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', nargs='+', type=str, default=ROOT / 'yolov5s.pt', help='model path or triton URL')
    parser.add_argument('--source', type=str, default=ROOT / 'data/images', help='file/dir/URL/glob/screen/0(webcam)')
    parser.add_argument('--data', type=str, default=ROOT / 'data/coco128.yaml', help='(optional) dataset.yaml path')
    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[640], help='inference size h,w')
    parser.add_argument('--conf-thres', type=float, default=0.25, help='confidence threshold')
    parser.add_argument('--iou-thres', type=float, default=0.45, help='NMS IoU threshold')
    parser.add_argument('--max-det', type=int, default=1000, help='maximum detections per image')
    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
    parser.add_argument('--view-img', action='store_true', help='show results')
    parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
    parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')
    parser.add_argument('--save-crop', action='store_true', help='save cropped prediction boxes')
    parser.add_argument('--nosave', action='store_true', help='do not save images/videos')
    parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --classes 0, or --classes 0 2 3')
    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
    parser.add_argument('--augment', action='store_true', help='augmented inference')
    parser.add_argument('--visualize', action='store_true', help='visualize features')
    parser.add_argument('--update', action='store_true', help='update all models')
    parser.add_argument('--project', default=ROOT / 'runs/detect', help='save results to project/name')
    parser.add_argument('--name', default='exp', help='save results to project/name')
    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
    parser.add_argument('--line-thickness', default=3, type=int, help='bounding box thickness (pixels)')
    parser.add_argument('--hide-labels', default=False, action='store_true', help='hide labels')
    parser.add_argument('--hide-conf', default=False, action='store_true', help='hide confidences')
    parser.add_argument('--half', action='store_true', help='use FP16 half-precision inference')
    parser.add_argument('--dnn', action='store_true', help='use OpenCV DNN for ONNX inference')
    parser.add_argument('--vid-stride', type=int, default=1, help='video frame-rate stride')
    opt = parser.parse_args()
    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand
    print_args(vars(opt))
    return opt


def main(opt):
    check_requirements(exclude=('tensorboard', 'thop'))
    run(**vars(opt))


if __name__ == '__main__':
*/


	                                                                                                                                                                                      const string VALNAME [] = {
			                                                                                                                                "SHOOT START"     , "SHOOT END"         , "TIME"       , "H - V" , "VIBRATION"  , "ROF" , 

 			                                                                                                                                              "HOLD"      , "STOP"     , "SIZE"        , "HEIGHT"    , "HOLD TIME"     , "END TIME" , "STRAFE TIME",

 					                                                                                                                                              	"SENSITIVITY" , "ADJUST" , "RESTART" , "MAX SENS" , "ADJUST RATE" , "GENERAL"      , "ADS"        , "FIRE" , "ADS + FIRE" , "Cancel Time"
    
	};	
	

				                                                                                                                                              		                                                                                                                                              	enum { 	START_V      , END_V       , TIME_V       , HORIZ_V     , RUMBLEPOWER_V , RATE_V        ,
	 			                                                                                                                                              			                                                                                                                                                     BFHOLD_V     , BFRELEASE_V , RADIUS_V     , STEPS_V     , HOLDTIME_V    , RELEASETIME_V ,  
	    			                                                                                                                                                  STRAFETIME_V , DSINITIAL_V , DSINCREASE_V , DSRESTART_V , DSMAX_V       , DSRATE_V      , 
	    			                                                                                                                                                  GENERAL_V    , ADS_V       , FIRE_V       , ADSFIRE_V   , CANCELTIME_V   
	}
	

	int valName_idx;//不能死的唯一一个真正的战士

 
	int NOTORIOUSrecoil_start[3];//  影射
	int NOTORIOUSrecoil_end[3];//  影射
	int NOTORIOUSrecoil_time[3];//  影射
	int NOTORIOUSrecoil_horizontal[3];//  影射
	int Shadow[3];//  影射
	int bullet_time[3];//  影射
	int black_aim[3];//  影射
	int razor_2[3];//  影射
//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	int incognito; //不能死的唯一一个真正的战士
	int Unity_Sonics;//不能死的唯一一个真正的战士
	//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	
	int S_Release;//不能死的唯一一个真正的战士
	int Cali_Kush;//不能死的唯一一个真正的战士
	//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	
	int strafe_time; //不能死的唯一一个真正的战士
	
  
	int Error;//不能死的唯一一个真正的战士
	int SGT_Notorious;//不能死的唯一一个真正的战士
	int Notorious32455;//不能死的唯一一个真正的战士
	int Shadow_abuse;//不能死的唯一一个真正的战士
	int customsens;//不能死的唯一一个真正的战士
	//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
  //徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	int CommisionerRealG;//不能死的唯一一个真正的战士
	int MadAim;//不能死的唯一一个真正的战士
	int Killer_Shots;//不能死的唯一一个真正的战士
	int Headshot_BOOM;//不能死的唯一一个真正的战士
	int 不能死的唯一一个真正的战士z;//不能死的唯一一个真正的战士
	

	                                                                                                                                                                             int Hasbulla;
	
  /*
  import argparse
import os
import platform
import sys
from pathlib import Path

import torch

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # YOLOv5 root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative

from models.common import DetectMultiBackend
from utils.dataloaders import IMG_FORMATS, VID_FORMATS, LoadImages, LoadScreenshots, LoadStreams
from utils.general import (LOGGER, Profile, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,
                           increment_path, non_max_suppression, print_args, scale_boxes, strip_optimizer, xyxy2xywh)
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device, smart_inference_mode


@smart_inference_mode()
def run(
        weights=ROOT / 'yolov5s.pt',  # model path or triton URL
        source=ROOT / 'data/images',  # file/dir/URL/glob/screen/0(webcam)
        data=ROOT / 'data/coco128.yaml',  # dataset.yaml path
        imgsz=(640, 640),  # inference size (height, width)
        conf_thres=0.25,  # confidence threshold
        iou_thres=0.45,  # NMS IOU threshold
        max_det=1000,  # maximum detections per image
        device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
        view_img=False,  # show results
        save_txt=False,  # save results to *.txt
        save_conf=False,  # save confidences in --save-txt labels
        save_crop=False,  # save cropped prediction boxes
        nosave=False,  # do not save images/videos
        classes=None,  # filter by class: --class 0, or --class 0 2 3
        agnostic_nms=False,  # class-agnostic NMS
        augment=False,  # augmented inference
        visualize=False,  # visualize features
        update=False,  # update all models
        project=ROOT / 'runs/detect',  # save results to project/name
        name='exp',  # save results to project/name
        exist_ok=False,  # existing project/name ok, do not increment
        line_thickness=3,  # bounding box thickness (pixels)
        hide_labels=False,  # hide labels
        hide_conf=False,  # hide confidences
        half=False,  # use FP16 half-precision inference
        dnn=False,  # use OpenCV DNN for ONNX inference
        vid_stride=1,  # video frame-rate stride
):
    source = str(source)
    save_img = not nosave and not source.endswith('.txt')  # save inference images
    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)
    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))
    webcam = source.isnumeric() or source.endswith('.streams') or (is_url and not is_file)
    screenshot = source.lower().startswith('screen')
    if is_url and is_file:
        source = check_file(source)  # download

    # Directories
    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run
    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

    # Load model
    device = select_device(device)
    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)
    stride, names, pt = model.stride, model.names, model.pt
    imgsz = check_img_size(imgsz, s=stride)  # check image size

    # Dataloader
    bs = 1  # batch_size
    if webcam:
        view_img = check_imshow(warn=True)
        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
        bs = len(dataset)
    elif screenshot:
        dataset = LoadScreenshots(source, img_size=imgsz, stride=stride, auto=pt)
    else:
        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt, vid_stride=vid_stride)
    vid_path, vid_writer = [None] * bs, [None] * bs

    # Run inference
    model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup
    seen, windows, dt = 0, [], (Profile(), Profile(), Profile())
    for path, im, im0s, vid_cap, s in dataset:
        with dt[0]:
            im = torch.from_numpy(im).to(model.device)
            im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32
            im /= 255  # 0 - 255 to 0.0 - 1.0
            if len(im.shape) == 3:
                im = im[None]  # expand for batch dim

        # Inference
        with dt[1]:
            visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False
            pred = model(im, augment=augment, visualize=visualize)

        # NMS
        with dt[2]:
            pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)

        # Second-stage classifier (optional)
        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)

        # Process predictions
        for i, det in enumerate(pred):  # per image
            seen += 1
            if webcam:  # batch_size >= 1
                p, im0, frame = path[i], im0s[i].copy(), dataset.count
                s += f'{i}: '
            else:
                p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)

            p = Path(p)  # to Path
            save_path = str(save_dir / p.name)  # im.jpg
            txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # im.txt
            s += '%gx%g ' % im.shape[2:]  # print string
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            imc = im0.copy() if save_crop else im0  # for save_crop
            annotator = Annotator(im0, line_width=line_thickness, example=str(names))
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_boxes(im.shape[2:], det[:, :4], im0.shape).round()

                # Print results
                for c in det[:, 5].unique():
                    n = (det[:, 5] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                # Write results
                for *xyxy, conf, cls in reversed(det):
                    if save_txt:  # Write to file
                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format
                        with open(f'{txt_path}.txt', 'a') as f:
                            f.write(('%g ' * len(line)).rstrip() % line + '\n')

                    if save_img or save_crop or view_img:  # Add bbox to image
                        c = int(cls)  # integer class
                        label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                        annotator.box_label(xyxy, label, color=colors(c, True))
                    if save_crop:
                        save_one_box(xyxy, imc, file=save_dir / 'crops' / names[c] / f'{p.stem}.jpg', BGR=True)

            # Stream results
            im0 = annotator.result()
            if view_img:
                if platform.system() == 'Linux' and p not in windows:
                    windows.append(p)
                    cv2.namedWindow(str(p), cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)  # allow window resize (Linux)
                    cv2.resizeWindow(str(p), im0.shape[1], im0.shape[0])
                cv2.imshow(str(p), im0)
                cv2.waitKey(1)  # 1 millisecond

            # Save results (image with detections)
            if save_img:
                if dataset.mode == 'image':
                    cv2.imwrite(save_path, im0)
                else:  # 'video' or 'stream'
                    if vid_path[i] != save_path:  # new video
                        vid_path[i] = save_path
                        if isinstance(vid_writer[i], cv2.VideoWriter):
                            vid_writer[i].release()  # release previous video writer
                        if vid_cap:  # video
                            fps = vid_cap.get(cv2.CAP_PROP_FPS)
                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        else:  # stream
                            fps, w, h = 30, im0.shape[1], im0.shape[0]
                        save_path = str(Path(save_path).with_suffix('.mp4'))  # force *.mp4 suffix on results videos
                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                    vid_writer[i].write(im0)

        # Print time (inference-only)
        LOGGER.info(f"{s}{'' if len(det) else '(no detections), '}{dt[1].dt * 1E3:.1f}ms")

    # Print results
    t = tuple(x.t / seen * 1E3 for x in dt)  # speeds per image
    LOGGER.info(f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}' % t)
    if save_txt or save_img:
        s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''
        LOGGER.info(f"Results saved to {colorstr('bold', save_dir)}{s}")
    if update:
        strip_optimizer(weights[0])  # update model (to fix SourceChangeWarning)


def parse_opt():
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', nargs='+', type=str, default=ROOT / 'yolov5s.pt', help='model path or triton URL')
    parser.add_argument('--source', type=str, default=ROOT / 'data/images', help='file/dir/URL/glob/screen/0(webcam)')
    parser.add_argument('--data', type=str, default=ROOT / 'data/coco128.yaml', help='(optional) dataset.yaml path')
    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[640], help='inference size h,w')
    parser.add_argument('--conf-thres', type=float, default=0.25, help='confidence threshold')
    parser.add_argument('--iou-thres', type=float, default=0.45, help='NMS IoU threshold')
    parser.add_argument('--max-det', type=int, default=1000, help='maximum detections per image')
    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
    parser.add_argument('--view-img', action='store_true', help='show results')
    parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
    parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')
    parser.add_argument('--save-crop', action='store_true', help='save cropped prediction boxes')
    parser.add_argument('--nosave', action='store_true', help='do not save images/videos')
    parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --classes 0, or --classes 0 2 3')
    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
    parser.add_argument('--augment', action='store_true', help='augmented inference')
    parser.add_argument('--visualize', action='store_true', help='visualize features')
    parser.add_argument('--update', action='store_true', help='update all models')
    parser.add_argument('--project', default=ROOT / 'runs/detect', help='save results to project/name')
    parser.add_argument('--name', default='exp', help='save results to project/name')
    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
    parser.add_argument('--line-thickness', default=3, type=int, help='bounding box thickness (pixels)')
    parser.add_argument('--hide-labels', default=False, action='store_true', help='hide labels')
    parser.add_argument('--hide-conf', default=False, action='store_true', help='hide confidences')
    parser.add_argument('--half', action='store_true', help='use FP16 half-precision inference')
    parser.add_argument('--dnn', action='store_true', help='use OpenCV DNN for ONNX inference')
    parser.add_argument('--vid-stride', type=int, default=1, help='video frame-rate stride')
    opt = parser.parse_args()
    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand
    print_args(vars(opt))
    return opt


def main(opt):
    check_requirements(exclude=('tensorboard', 'thop'))
    run(**vars(opt))


if __name__ == '__main__':
  */

	const string CONTROLLERNAME[] = {
			        "ADS BTN"    , "Fire BTN"  , "Tactical BTN" , "Lethal BTN" , "Jump BTN"     , "Crouch BTN"    ,
   
                    "Reload BTN" , "Melee BTN" , "Sprint BTN"   , "Weapon BTN" , "Hair Trigger" , "Block Rumble"    

	};


	enum { ADS_BTN_C    , FIRE_BTN_C  , TACTICAL_BTN_C , LETHAL_BTN_C , JUMP_BTN_C    , CROUCH_BTN_C , 
	       RELOAD_BTN_C , MELEE_BTN_C , SPRINT_BTN_C   , WEAPON_BTN_C , HAIRTRIGGER_C , RUMBLE_C   
	}
	
	int controllerName_idx;
	
	                                                                                                                                     const string LAYOUT_BTN_PS[] = { "L2"  , "R2"  , "L1"  , "R1"  , "CROSS"   , "CIRCLE"  , "SQUARE"  , "R3"  , "L3"  , "TRIANGLE"   };
	                                                                                                                                     const string LAYOUT_BTN_XB[] = { "LT"  , "RT"  , "LB"  , "RB"  , "A"       , "B"       , "X"       , "RS"  , "LS"  , "Y"          };
	                                                                                                                                     const uint8 BTN[]            = { PS4_L2, PS4_R2, PS4_L1, PS4_R1, PS4_CROSS , PS4_CIRCLE, PS4_SQUARE, PS4_R3, PS4_L3, PS4_TRIANGLE };
	
	int GeneralG;//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	int MR_Producer;
	int Hackzz;
	int UgotFXCKED;
	int Lzzz;
	int DarkAIM;
	int DEADshot;//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	int StabAssist;
	int StabAssist2;
	int StabAssist3;
	int StabAssist4;//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	int Louis_V;	



//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	const string PROFILESNAME[] = {
			        "Prim/Sec BTN" ,   "Custom Profile" ,   "Resync BTNs"}; 


	enum { 	       PRIM_SEC_P      ,    CUSTOM_P        ,    RESYNC_P    } 	
	
	int profilesName_idx;

	                                                                                                                                                  const string PROFILEBTN_PS[] = { "" ,  "L2" , "R2"  , "L1"  , "R1"  , "CROSS"  , "CIRCLE"  , "SQUARE"  , "TRIANGLE"  , "R3"  , "L3"  , "Dpad UP", "Dpad DOWN", "Dpad LEFT", "Dpad RIGHT"};
	                                                                                                                                                  const string PROFILEBTN_XB[] = { "" ,  "LT" , "RT"  , "LB"  , "RB"  , "A"      , "B"       , "X"       , "Y"         , "RS"  , "LS"  , "Dpad UP", "Dpad DOWN", "Dpad LEFT", "Dpad RIGHT"};
	
	                                                                                                                                                  const int8 PROFILE_BTN[]   = { -1  , PS4_L2, PS4_R2, PS4_L1, PS4_R1, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE, PS4_TRIANGLE, PS4_R3, PS4_L3, PS4_UP   , PS4_DOWN   , PS4_LEFT   , PS4_RIGHT   };
	
                                                                                                                                                  	int PRADA[3];
                                                                                                                                                  	int InTheShadow[3];  




                                                                                                                                                  	const uint8 ASCII_NUM[] = 

                                                                                                                                                    	{48,49,50,51,52,53,54,55,56,57};
	

	                                                                                                                                                  int i;

data(
         
                                                                                                                                                      1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
      
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );     
     

	int ShadowShotzz = TRUE;
	int HEADHUNTER; 
	int LIVERSHOT;
	                                                                                                                                                  int Left_hook;
	                                                                                                                                                  int Right_hook;

	int GalaxyShotUPspiral;
                                                                                                                                                  	int Shadow_stabzz;	
	int BLK;
	int Estrella;
	int Crip_Shot;
	int Errror;


	int Killshotz; 
	int Roundhouse;
	int NOTORIOUSrecoil_boost;
	int KO_Kick;
	int Shadowzzz;
	

	int Zumo;                                                    
	int Rage_Quit;
	int Mode_1;
	int Mode_2;
	

	int count_shadow; 
	int CLIK;
	

	int StraghtCash;
	int ShadowShotAimBotPixel; 
 	

	int NotoriouzScriptzz;
	int CrazyShotz;
	


init{
					

	pmemValue = get_pvar(SPVAR_1, 1, 32767, 0);
                                                                                                                                                  	toggle_burstfire[0]    = get_15var(pmemValue,  0);	toggle_burstfire[1]  = get_15var(pmemValue,  1);	toggle_burstfire[2]  = get_15var(pmemValue,  2);	
                                                                                                                                                  	toggle_aimabuse[0]     = get_15var(pmemValue,  3);	toggle_aimabuse[1]   = get_15var(pmemValue,  4);	toggle_aimabuse[2]   = get_15var(pmemValue,  5);	
                                                                                                                                                  	toggle_autoADS[0]      = get_15var(pmemValue,  6);	toggle_autoADS[1]    = get_15var(pmemValue,  7);	toggle_autoADS[2]    = get_15var(pmemValue,  8);	
                                                                                                                                                  	toggle_autoFIRE[0]     = get_15var(pmemValue,  9);	toggle_autoFIRE[1]   = get_15var(pmemValue, 10);	toggle_autoFIRE[2]   = get_15var(pmemValue, 11);	
	toggle_holdBreath[0]   = get_15var(pmemValue, 12);	toggle_holdBreath[1] = get_15var(pmemValue, 13);	toggle_holdBreath[2] = get_15var(pmemValue, 14);
	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_2, 1, 32767, 0);
	toggle_turboMelee[0]   = get_15var(pmemValue,  0);	toggle_turboMelee[1] = get_15var(pmemValue,  1);	toggle_turboMelee[2] = get_15var(pmemValue,  2);	
	toggle_autorun         = get_15var(pmemValue,  3);  toggle_bunnyHop      = get_15var(pmemValue,  4);    StabAssist4   = get_15var(pmemValue,  5);  
                                                                                                                                                  	Louis_V          = get_15var(pmemValue,  6);  toggle_νεκρός     = get_15var(pmemValue,  7);
	
	pmemValue = get_pvar(SPVAR_3, -32768, 32767, 0);
                                                                                                                                                  	toggle_NOTORIOUSrecoil[0] = get_4var(pmemValue, 3);		toggle_NOTORIOUSrecoil[1] = get_4var(pmemValue, 2);		toggle_NOTORIOUSrecoil[2] = get_4var(pmemValue, 1)     toggle_slideCancel = get_4var(pmemValue, 0);
	
	pmemValue = get_pvar(SPVAR_4, -32768, 32767, 0);
	toggle_rapidfire[0] = get_4var(pmemValue, 3);		toggle_rapidfire[1] = get_4var(pmemValue, 2);		toggle_rapidfire[2] = get_4var(pmemValue, 1);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_5, -32768, 32767, 0);
	toggle_aimassist[0] = get_4var(pmemValue, 3);		toggle_aimassist[1] = get_4var(pmemValue, 2);		toggle_aimassist[2] = get_4var(pmemValue, 1);
	                                                                                                                                                  
	pmemValue = get_pvar(SPVAR_6, -32768, 32767, 0);
                                                                                                                                                  	toggle_shotMod[0] = get_4var(pmemValue, 3);		    toggle_shotMod[1] = get_4var(pmemValue, 2);		    toggle_shotMod[2] = get_4var(pmemValue, 1);
	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_7, -32768, 32767, 0);
                                                                                                                                                  	toggle_shotActivator[0] = get_4var(pmemValue, 3);   toggle_shotActivator[1] = get_4var(pmemValue, 2);	toggle_shotActivator[2] = get_4var(pmemValue, 1);    toggle_sensitivity = get_4var(pmemValue, 0);

	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_8, 1, 32767, set_2var(0, 1));
	GeneralG = get_2var(pmemValue, 0);		MR_Producer = get_2var(pmemValue, 1);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_9, 1, 32767, set_2var(2, 3));
	                                                                                                                                                  Hackzz = get_2var(pmemValue, 0);		UgotFXCKED = get_2var(pmemValue, 1);
                                                                                                                                                  	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_10, 1, 32767, set_2var(4, 5));
                                                                                                                                                  	Lzzz = get_2var(pmemValue, 0);		DarkAIM = get_2var(pmemValue, 1);
	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_11, 1, 32767, set_2var(6, 7));
                                                                                                                                                  	DEADshot = get_2var(pmemValue, 0);		StabAssist = get_2var(pmemValue, 1);
	
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_12, 1, 32767, set_2var(8, 9));
                                                                                                                                                  	StabAssist2 = get_2var(pmemValue, 0);		StabAssist3 = get_2var(pmemValue, 1);
                                                                                                                                                  	
		
                                                                                                                                                  	pmemValue = get_pvar(SPVAR_13, 1, 32767, set_2var(0, 0));
                                                                                                                                                  	InTheShadow[0] = get_2var(pmemValue, 0);		InTheShadow[1] = get_2var(pmemValue, 1);
	
	                                                                                                                                                  pmemValue = get_pvar(SPVAR_14, 1, 32767, set_2var(0, 0));
	                                                                                                                                                  InTheShadow[2] = get_2var(pmemValue, 0);		PRADA[0] = get_2var(pmemValue, 1);
	
	pmemValue = get_pvar(SPVAR_15, 1, 32767, set_2var(0, 0));
	PRADA[1] = get_2var(pmemValue, 0);		PRADA[2] = get_2var(pmemValue, 1);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供


	                                                                                                                                                  pmemValue = get_pvar(SPVAR_16, -32768, 32767, 0);
	                                                                                                                                                  NOTORIOUSrecoil_start[0] = get_2var(pmemValue, 0);		NOTORIOUSrecoil_end[0] = get_2var(pmemValue, 1);

	                                                                                                                                                  pmemValue = get_pvar(SPVAR_17, -32768, 32767, 0);
	                                                                                                                                                  NOTORIOUSrecoil_start[1] = get_2var(pmemValue, 0);		NOTORIOUSrecoil_end[1] = get_2var(pmemValue, 1);

	                                                                                                                                                  pmemValue = get_pvar(SPVAR_18, -32768, 32767, 0);
                                                                                                                                                  	NOTORIOUSrecoil_start[2] = get_2var(pmemValue, 0);		NOTORIOUSrecoil_end[2] = get_2var(pmemValue, 1);
	
	                                                                                                                                                  NOTORIOUSrecoil_time[0] = get_pvar(SPVAR_19, -32768, 32767, 0);
                                                                                                                                                                                                                                                                                                    	NOTORIOUSrecoil_time[1] = get_pvar(SPVAR_20, -32768, 32767, 0);
	NOTORIOUSrecoil_time[2] = get_pvar(SPVAR_21, -32768, 32767, 0);

	
	pmemValue = get_pvar(SPVAR_22, -32768, 32767, 0);
	                                                                                                                                                  NOTORIOUSrecoil_horizontal[0] = get_2var(pmemValue, 0);		Shadow[0] = get_2var(pmemValue, 1);
	
	pmemValue = get_pvar(SPVAR_23, -32768, 32767, 0);
	NOTORIOUSrecoil_horizontal[1] = get_2var(pmemValue, 0);		Shadow[1] = get_2var(pmemValue, 1);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	
	pmemValue = get_pvar(SPVAR_24, -32768, 32767, 0);
	NOTORIOUSrecoil_horizontal[2] = get_2var(pmemValue, 0);		Shadow[2] = get_2var(pmemValue, 1);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供	
	
                                                                                                                                                  	
	                                                                                                                                                  bullet_time[0] = get_pvar(SPVAR_25, -32768, 32767, 0);
                                                                                                                                                  	bullet_time[1] = get_pvar(SPVAR_26, -32768, 32767, 0);
	                                                                                                                                                  bullet_time[2] = get_pvar(SPVAR_27, -32768, 32767, 0);
	
	
	incognito     = get_pvar(SPVAR_28, 1,  1000, 120);
	Unity_Sonics  = get_pvar(SPVAR_29, 1,  1000, 120);
	
	
	pmemValue = get_pvar(SPVAR_30, 1, 32767, set_2var(20, 15));
	black_aim[0] = get_2var(pmemValue, 0);		razor_2[0] = get_2var(pmemValue, 1);
	
	pmemValue = get_pvar(SPVAR_31, 1, 32767, set_2var(20, 15));
	black_aim[1] = get_2var(pmemValue, 0);		razor_2[1] = get_2var(pmemValue, 1);
	
	pmemValue = get_pvar(SPVAR_32, 1, 32767, set_2var(20, 15));
	black_aim[2] = get_2var(pmemValue, 0);		razor_2[2] = get_2var(pmemValue, 1);
	
	
	S_Release     = get_pvar(SPVAR_33, 1, 500, 100);
	Cali_Kush  = get_pvar(SPVAR_34, 1, 500,  50);
	
	
	strafe_time = get_pvar(SPVAR_35, 1, 10000, 500);
	
	
	Error     = get_pvar(SPVAR_36, 1, 327, 100);
	SGT_Notorious     = get_pvar(SPVAR_37, 1, 327, 100);
	Notorious32455     = get_pvar(SPVAR_38, 1, 327, 100);
	Shadow_abuse = get_pvar(SPVAR_39, 1, 327, 100);
	
	
	CommisionerRealG = get_pvar(SPVAR_40, 1, 327, 60 );
	
	pmemValue = get_pvar(SPVAR_41, 1, 32767, set_2var(80, 30));
	MadAim   = get_2var(pmemValue, 0);		Killer_Shots = get_2var(pmemValue, 1);
	
	Headshot_BOOM      = get_pvar(SPVAR_42, 1, 327, 100);
	不能死的唯一一个真正的战士z = get_pvar(SPVAR_43, 1, 50 , 1  );
	
	
	Hasbulla     = get_pvar(SPVAR_44, 1, 300, 80);
	
	

	NotoriouzScriptzz = get_slot();//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
}

   
main {    

	set_val(TRACE_1, toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel]);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	                                                                                                                                                  set_val(TRACE_2, speed_toggle_UP[ShadowShotAimBotPixel]);
	                                                                                                                                                  set_val(TRACE_3, toggle_rapidfire[ShadowShotAimBotPixel]);
	                                                                                                                                                  set_val(TRACE_4, speed_toggle_RIGHT[ShadowShotAimBotPixel]);



   
                                                                                                                                                      if(get_console() == PIO_PS4)
    {
    	if(get_controller() != PIO_PS4) 
    	{
        	if(get_ival(PS4_SHARE)) 
        	{
        		if(get_ival(PS4_R3)) 
        		{
					set_val(PS4_SHARE,100);
                                                                                                                                                                  	set_val(PS4_TOUCH,0);
                                                                                                                                                                  	set_val(PS4_R3,0);
        		}
                                                                                                                                                          		else 
        		{
        			set_val(PS4_TOUCH, 100);
        			set_val(PS4_SHARE, 0);
        		}
        	}
    	}
    }
                                                                                                                                                      
                                                                                                                                                      else if(get_console() == PIO_XB360)
	{
		if(get_controller() == PIO_PS4) 
			swap(PS4_TOUCH, PS4_SHARE);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
	}
	


                                                                                                                                                  	if(!GalaxyShotUPspiral && !Shadow_stabzz && !BLK && !Estrella && !Crip_Shot)
	{
	
	                                                                                                                                                  	if( (get_ival(PS4_L2) && event_press(PS4_SHARE)) || (!get_ival(PS4_L2) && event_press(PS4_PS)) )
		{			
			Errror = !Errror;
			
			if(Errror) 
				combo_run(RUMBLE_OFF);	//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
				
			else
			{
				combo_run(RUMBLE_ON);
				ShadowShotzz = TRUE;//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供	
			}
		}
		
	
		if(Errror) 
		{
    		Right_hook= FALSE;
			count_shadow = 0;
	
			if(event_press(PS4_CIRCLE) && get_brtime(PS4_CIRCLE) < 200) 
			{
				Errror = FALSE;
				combo_run(RUMBLE_ON);
				ShadowShotzz = TRUE; 
			}
			combo_run(Errror);
		}
		else 
			combo_stop(Errror);
	}
	
 
                                                                                                                                                  
	if(!Errror)
	{


		if(get_ival(PS4_L1))
		{	
			if(event_release(PS4_L3))
			{
				cls_oled(OLED_BLACK);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
    			
		                                                                                                                                                  		if(BLK)
				{
	                                                                                                                                                  				BLK = FALSE;
					ShadowShotzz = TRUE;   
				}
				else if(Shadow_stabzz)
				{
					Shadow_stabzz = FALSE;//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
					ShadowShotzz = TRUE; 
				}
				else if(Estrella)
				{
					Estrella = FALSE;
					ShadowShotzz = TRUE; 
				}
				else if(Crip_Shot)
				{
					Crip_Shot = FALSE;
					ShadowShotzz = TRUE; 
				}
				else 
					GalaxyShotUPspiral = !GalaxyShotUPspiral;
					
				if(!GalaxyShotUPspiral)
				{
					combo_run(RUMBLE_OFF); //徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
					ShadowShotzz = TRUE;  
				}
				else if(GalaxyShotUPspiral)
				{
					menuName_idx = Shadow_stabzz_MM;        
					CrazyShotz = 0;		
					combo_run(RUMBLE_ON);
					draw_main_menu();
					HEADHUNTER = TRUE;
					LIVERSHOT = TRUE;
				}
			}
			set_val(PS4_OPTIONS, 0);
		} 

		if(Shadow_stabzz || BLK || GalaxyShotUPspiral || Estrella || Crip_Shot)  
		{		
		
			button_animation(); 
			
		
    		Right_hook = FALSE;
			count_shadow = 0;
			
		
			CLIK += get_rtime();
	
			if(CLIK > 2000)
			{
				CrazyShotz ++;
				LIVERSHOT = TRUE;
			}
			
		
			if(!get_ival(PS4_L2) && event_release(PS4_PS))
				save();
				
		 
			block_btn(); 
		}
		


		if(Shadow_stabzz) 
		{

		                                                                                                                                                  	toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel]    = toggle( modName_idx, NOTORIOUSRECOIL_M , NOTORIOUSRECOIL_TXT     , toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel]    );
			toggle_rapidfire[ShadowShotAimBotPixel]     = toggle( modName_idx, RAPIDFIRE_M  , RAPIDFIRE_TXT      , toggle_rapidfire[ShadowShotAimBotPixel]     );
		                                                                                                                                                  	toggle_burstfire[ShadowShotAimBotPixel]     = toggle( modName_idx, BURSTFIRE_M  , ONOFF_TXT          , toggle_burstfire[ShadowShotAimBotPixel]     );
		                                                                                                                                                  	toggle_aimassist[ShadowShotAimBotPixel]     = toggle( modName_idx, AIMASSIST_M  , SHAPES_TXT         , toggle_aimassist[ShadowShotAimBotPixel]     );
		                                                                                                                                                                                                                                                                                                    	toggle_aimabuse[ShadowShotAimBotPixel]      = toggle( modName_idx, AIMABUSE_M   , ONOFF_TXT          , toggle_aimabuse[ShadowShotAimBotPixel]      );
		                                                                                                                                                  	toggle_shotMod[ShadowShotAimBotPixel]       = toggle( modName_idx, SHOTMOD_M    , SHOT_MOD_TXT       , toggle_shotMod[ShadowShotAimBotPixel]       );
		                                                                                                                                                  	toggle_shotActivator[ShadowShotAimBotPixel] = toggle( modName_idx, SHOTACTIV_M  , SHOT_ACTIVATOR_TXT , toggle_shotActivator[ShadowShotAimBotPixel] );
		                                                                                                                                                  	toggle_holdBreath[ShadowShotAimBotPixel]    = toggle( modName_idx, HOLDBREATH_M , ONOFF_TXT          , toggle_holdBreath[ShadowShotAimBotPixel]    );
		                                                                                                                                                  	toggle_turboMelee[ShadowShotAimBotPixel]    = toggle( modName_idx, TURBOMELEE_M , ONOFF_TXT          , toggle_turboMelee[ShadowShotAimBotPixel]    );
		                                                                                                                                                  	toggle_autoADS[ShadowShotAimBotPixel]       = toggle( modName_idx, AUTOADS_M    , ONOFF_TXT          , toggle_autoADS[ShadowShotAimBotPixel]       );
		                                                                                                                                                  	toggle_autoFIRE[ShadowShotAimBotPixel]      = toggle( modName_idx, AUTOFIRE_M   , ONOFF_TXT          , toggle_autoFIRE[ShadowShotAimBotPixel]      );
		
		
		                                                                                                                                                  	toggle_sensitivity = toggle( modName_idx, SENSITIVITY_M , SENSITIVITY_TXT , toggle_sensitivity );
		                                                                                                                                                  	toggle_autorun     = toggle( modName_idx, AUTORUN_M     , ONOFF_TXT       , toggle_autorun     );
		                                                                                                                                                  	toggle_bunnyHop    = toggle( modName_idx, BUNNYHOP_M    , ONOFF_TXT       , toggle_bunnyHop    );
		                                                                                                                                                  	toggle_slideCancel = toggle( modName_idx, SLIDECANCEL_M , SLIDECANCEL_TXT , toggle_slideCancel );
		                                                                                                                                                  	toggle_νεκρός   = toggle( modName_idx, νεκρός_M   , ONOFF_TXT       , toggle_νεκρός   );
		} 
		


		if(BLK) 
		{


		
			if(get_ival(PS4_CROSS)) 
			{
			 
		                                                                                                                                                  		NOTORIOUSrecoil_start[ShadowShotAimBotPixel]      = edit_val( START_V       , NOTORIOUSrecoil_start[ShadowShotAimBotPixel]     ,    -99 ,     99 ,          1 ,          10               ); 
				NOTORIOUSrecoil_end[ShadowShotAimBotPixel]        = edit_val( END_V         , NOTORIOUSrecoil_end[ShadowShotAimBotPixel]       ,    -99 ,     99 ,          1 ,          10               ); 
	                                                                                                                                                  			NOTORIOUSrecoil_time[ShadowShotAimBotPixel]       = edit_val( TIME_V        , NOTORIOUSrecoil_time[ShadowShotAimBotPixel]      ,      0 ,  10000 ,        100 ,        1000               );  
				NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel] = edit_val( HORIZ_V       , NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel],    -99 ,     99 ,          1 ,          10               ); 
	                                                                                                                                                  			Shadow[ShadowShotAimBotPixel]          = edit_val( RUMBLEPOWER_V , Shadow[ShadowShotAimBotPixel]         ,    -60 ,     60 ,          1 ,          10               );
				if(toggle_rapidfire[ShadowShotAimBotPixel] == RPM)
					bullet_time[ShadowShotAimBotPixel]      = edit_val( RATE_V        , bullet_time[ShadowShotAimBotPixel]         ,     60 ,    750 ,          1 ,          10               );
		                                                                                                                                                  		else if(toggle_rapidfire[ShadowShotAimBotPixel] == RPS)
					bullet_time[ShadowShotAimBotPixel]      = edit_val( RATE_V        , bullet_time[ShadowShotAimBotPixel]         ,      1 ,     25 ,          1 ,          10               );
		                                                                                                                                                  		black_aim[ShadowShotAimBotPixel]      = edit_val( RADIUS_V      , black_aim[ShadowShotAimBotPixel]     ,      0 ,     50 ,          1 ,          10               );
				razor_2[ShadowShotAimBotPixel]       = edit_val( STEPS_V       , razor_2[ShadowShotAimBotPixel]      ,      0 ,    500 ,          1 ,          10               ); 
				
			
				incognito         = edit_val( BFHOLD_V      , incognito         , 0 ,  1000 , 10 , 100 );
				Unity_Sonics      = edit_val( BFRELEASE_V   , Unity_Sonics      , 0 ,  1000 , 10 , 100 ); 
				S_Release          = edit_val( HOLDTIME_V    , S_Release          , 0 ,   500 , 10 , 100 );
		                                                                                                                                                  		Cali_Kush       = edit_val( RELEASETIME_V , Cali_Kush       , 0 ,   500 , 10 , 100 );
		                                                                                                                                                  		strafe_time            = edit_val( STRAFETIME_V  , strafe_time            , 0 ,  9990 , 10 , 100 );
		                                                                                                                                                  		CommisionerRealG  = edit_val( DSINITIAL_V   , CommisionerRealG  , 0 ,   327 , 1  , 10  );
				MadAim         = edit_val( DSINCREASE_V  , MadAim         , 0 ,   100 , 1  , 10  );
		                                                                                                                                                  		Killer_Shots       = edit_val( DSRESTART_V   , Killer_Shots       , 0 ,   100 , 1  , 10  );
				Headshot_BOOM      = edit_val( DSMAX_V       , Headshot_BOOM      , 0 ,   327 , 1  , 10  );
				不能死的唯一一个真正的战士z = edit_val( DSRATE_V      , 不能死的唯一一个真正的战士z , 1 ,    50 , 1  , 10  );
				Error                = edit_val( GENERAL_V     , Error                , 1 ,   327 , 1  , 10  );
		                                                                                                                                                  		SGT_Notorious                = edit_val( ADS_V         , SGT_Notorious                , 1 ,   327 , 1  , 10  );
		                                                                                                                                                  		Notorious32455                = edit_val( FIRE_V        , Notorious32455                , 1 ,   327 , 1  , 10  );
				Shadow_abuse            = edit_val( ADSFIRE_V     , Shadow_abuse            , 1 ,   327 , 1  , 10  );
		                                                                                                                                                  		Hasbulla            = edit_val( CANCELTIME_V  , Hasbulla            , 1 ,   200 , 1  , 10  );
			} 

			else 
			{	
				if(modName_idx == NOTORIOUSRECOIL_M)  
				{
				
					if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] >= RUMBLELOW) 
						valName_idx = cycle(valName_idx, HORIZ_V, RUMBLEPOWER_V );   
					else if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == STANDARD)
						valName_idx = cycle(valName_idx, END_V , HORIZ_V  ); 
					else 
						valName_idx = cycle(valName_idx, START_V  , HORIZ_V     );
				}
			                                                                                                                                                  	if(modName_idx == RAPIDFIRE_M)   valName_idx = cycle(valName_idx, RATE_V      , RATE_V        ); 
				if(modName_idx == BURSTFIRE_M)   valName_idx = cycle(valName_idx, BFHOLD_V    , BFRELEASE_V   ); 
			                                                                                                                                                  	if(modName_idx == AIMASSIST_M)   valName_idx = cycle(valName_idx, RADIUS_V    , STEPS_V       ); 
				if(modName_idx == AIMABUSE_M )   valName_idx = cycle(valName_idx, HOLDTIME_V  , RELEASETIME_V ); 
			                                                                                                                                                  	if(modName_idx == SHOTMOD_M  )   valName_idx = cycle(valName_idx, STRAFETIME_V, STRAFETIME_V  ); 
				
				if(modName_idx == SENSITIVITY_M) 
				{
				
					if(toggle_sensitivity == CUSTOMSENS)
						valName_idx = cycle(valName_idx, GENERAL_V, ADSFIRE_V ); 
					else if(toggle_sensitivity == DYNAMICSENS)
						valName_idx = cycle(valName_idx, DSINITIAL_V, DSRATE_V ); 
				}
				
				if(modName_idx == SLIDECANCEL_M  )   valName_idx = cycle(valName_idx, CANCELTIME_V, CANCELTIME_V  ); 
			} 
			
		} 	
		


		if(Estrella)
		{


			GeneralG      = toggle( controllerName_idx, ADS_BTN_C      , LAYOUT_BTN_PS_TXT, GeneralG      );
			MR_Producer     = toggle( controllerName_idx, FIRE_BTN_C     , LAYOUT_BTN_PS_TXT, MR_Producer     );
			Hackzz = toggle( controllerName_idx, TACTICAL_BTN_C , LAYOUT_BTN_PS_TXT, Hackzz );
		                                                                                                                                                  	UgotFXCKED   = toggle( controllerName_idx, LETHAL_BTN_C   , LAYOUT_BTN_PS_TXT, UgotFXCKED   );
			Lzzz     = toggle( controllerName_idx, JUMP_BTN_C     , LAYOUT_BTN_PS_TXT, Lzzz     );
	                                                                                                                                                  		DarkAIM   = toggle( controllerName_idx, CROUCH_BTN_C   , LAYOUT_BTN_PS_TXT, DarkAIM   );
			DEADshot   = toggle( controllerName_idx, RELOAD_BTN_C   , LAYOUT_BTN_PS_TXT, DEADshot   );
		                                                                                                                                                  	StabAssist    = toggle( controllerName_idx, MELEE_BTN_C    , LAYOUT_BTN_PS_TXT, StabAssist    );
	                                                                                                                                                                                                                                                                                                    		StabAssist2   = toggle( controllerName_idx, SPRINT_BTN_C   , LAYOUT_BTN_PS_TXT, StabAssist2   );
			StabAssist3   = toggle( controllerName_idx, WEAPON_BTN_C   , LAYOUT_BTN_PS_TXT, StabAssist3   );
	                                                                                                                                                  		StabAssist4  = toggle( controllerName_idx, HAIRTRIGGER_C  , ONOFF_TXT        , StabAssist4  );
			Louis_V       = toggle( controllerName_idx, RUMBLE_C       , ONOFF_TXT        , Louis_V       );
		}
		

		if(!GalaxyShotUPspiral && !Shadow_stabzz && !Estrella && !Crip_Shot) 
		{
		

			if(!BLK)
			{
			
				if(StabAssist4)
					deadzone(PS4_L2, PS4_R2, 99, 99);
					
		
				if(toggle_autoADS[ShadowShotAimBotPixel])
				{
					if(get_val(BTN[MR_Producer]))
						set_val(BTN[GeneralG], 100);
				}
				
				if(toggle_autoFIRE[ShadowShotAimBotPixel])
				{
					if(get_val(BTN[GeneralG]))
						set_val(BTN[MR_Producer], 100);
				}
				
		
				if(Louis_V)
					block_rumble();
					
		
		
			
				if(get_val(PROFILE_BTN[InTheShadow[RESYNC_P]]) )
				{
					if(event_press(PROFILE_BTN[PRADA[RESYNC_P]]) )
					{
						if(PRADA[PRIM_SEC_P] != 0)
							ShadowShotAimBotPixel = cycle(ShadowShotAimBotPixel++, 0, 1);
							
						ShadowShotzz = TRUE;
					}
					set_val(PROFILE_BTN[PRADA[RESYNC_P]], 0)
				}
				
				
				if(get_val(PROFILE_BTN[InTheShadow[CUSTOM_P]]) )
				{
					
					if(event_press(PROFILE_BTN[PRADA[CUSTOM_P]]) )
					{
						if(StraghtCash == 0)
							StraghtCash = 2;
						else
							StraghtCash = 0;
							
						ShadowShotAimBotPixel = StraghtCash;
						ShadowShotzz = TRUE;
					}
					set_val(PROFILE_BTN[PRADA[CUSTOM_P]], 0)
					
				}
				
				
				if(!get_val(PROFILE_BTN[InTheShadow[CUSTOM_P]]) && !get_val(PROFILE_BTN[InTheShadow[RESYNC_P]]) && event_release(PROFILE_BTN[PRADA[PRIM_SEC_P]]) && get_ptime(PROFILE_BTN[PRADA[PRIM_SEC_P]]) < 250 )
				{
					if(StraghtCash < 2)
						ShadowShotAimBotPixel = !ShadowShotAimBotPixel;//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
						
					ShadowShotzz = TRUE;
				}
				if(ShadowShotAimBotPixel < 2)
					StraghtCash = 0;
				else 
					StraghtCash = 2;
					
		
		
		
				if(toggle_holdBreath[ShadowShotAimBotPixel])
				{
					if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= 50)
					{
						if(get_val(BTN[GeneralG]))
							set_val(BTN[StabAssist2], 100);
							
						if(event_press(BTN[GeneralG]))
							combo_run(HOLD_BREATH);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
					}
				}
					
		
		
			
				if(toggle_turboMelee[ShadowShotAimBotPixel])
				{
					if(get_val(BTN[StabAssist]) && get_ptime(BTN[Lzzz]) > 200)
					{
						combo_btn = BTN[StabAssist];
						combo_wait = 40;
						combo_run(SPAM);//徒対途名谷事満属地玉山座入営制績与内単気。外現最縁格族裁聞任疑北安任掲購。真中亡固耐府止口江入県民像越政建。辞週参秒校昇気培写張社定暮意。政産月治新価書化止秀口地。転煮年元法達治普改有座部選済会江読立宮。念区回習静玲碁葉頃購防式権。資件用併売昔同戦刊通認任毎散今病賞。谷治年転向葉作組法属向面。島条記供
					}
				}
					
		
				
			
		    	if(toggle_sensitivity == CUSTOMSENS)
		    	{	
		    		if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) >= 8)
		    		{
			    		if(!get_val(BTN[GeneralG]) && !get_val(BTN[MR_Producer]))
							customsens = Error;
	                                                                                                                                                  					else if(get_val(BTN[GeneralG]) && !get_val(BTN[MR_Producer]))
							customsens = SGT_Notorious;
					                                                                                                                                                  	else if(!get_val(BTN[GeneralG]) && get_val(BTN[MR_Producer]))
							customsens = Notorious32455;
						if(get_val(BTN[GeneralG]) && get_val(BTN[MR_Producer]))
							customsens = Shadow_abuse;
			                                                                                                                                                  	
						sensitivity(PS4_RY,NOT_USE,customsens);
			                                                                                                                                                  			sensitivity(PS4_RX,NOT_USE,customsens);
					}
		    	}
		    	
			
		                                                                                                                                                      	else if(toggle_sensitivity == DYNAMICSENS)
		    	{	
		    		if((get_val(BTN[GeneralG]) || get_val(BTN[MR_Producer])) && isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) >= 20)
		                                                                                                                                                      			set_sens();
		    	}
		    	
		
				
			/* 
			    */
				if(toggle_autorun)
	                                                                                                                                                  			{
					if((isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) >= 90) && get_ival(PS4_LY) < 20 && !get_val(BTN[GeneralG]) && !get_val(BTN[MR_Producer]))
						set_val(BTN[StabAssist2], 100);
				}
		                                                                                                                                                  		
		
		
			
		                                                                                                                                                  		if(toggle_shotMod[ShadowShotAimBotPixel])
				{
		 			
					if(toggle_shotMod[ShadowShotAimBotPixel] == STRAFE)
					{
			                                                                                                                                                  			if(check_shotActivator())
							combo_run(STRAFESHOT);
						else
							combo_stop(STRAFESHOT);
					}
			
					
			                                                                                                                                                  		else if(toggle_shotMod[ShadowShotAimBotPixel] == JUMP)
					{
						if(check_shotActivator())
							combo_run(JUMPSHOT);
					}
			
					
					else if(toggle_shotMod[ShadowShotAimBotPixel] == DROP)
					{
						if(check_shotActivator())
							set_val(BTN[DarkAIM], 100);
					}
				}
				
		
			
			
				if(toggle_bunnyHop)
				{
					if(get_val(BTN[Lzzz]) && get_ptime(BTN[Lzzz]) > 200)
					{
						combo_btn = BTN[Lzzz];
						combo_wait = 30;
						combo_run(SPAM);
					}
				}
			
		
			
			
				if(toggle_slideCancel)
				{
					
					if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) >= 80 && !get_val(BTN[GeneralG]))
					{
						if(event_release(BTN[DarkAIM]))
						{
							if(toggle_slideCancel == MW)
								combo_run(SLIDE_CANCEL_MW);
							if(toggle_slideCancel == CW)
								combo_run(SLIDE_CANCEL_CW);
						}
					}
					else
					{
						combo_stop(SLIDE_CANCEL_MW);
						combo_stop(SLIDE_CANCEL_CW);
					}
				}
				
		
			
			
				toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] = speed_toggle( PS4_L2, PS4_UP    , toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] , NOTORIOUSRECOIL_M , NOTORIOUSRECOIL_TXT , speed_toggle_UP[ShadowShotAimBotPixel]    );
				toggle_rapidfire[ShadowShotAimBotPixel]  = speed_toggle( PS4_L2, PS4_RIGHT , toggle_rapidfire[ShadowShotAimBotPixel]  , RAPIDFIRE_M  , RAPIDFIRE_TXT  , speed_toggle_RIGHT[ShadowShotAimBotPixel] );
				toggle_aimassist[ShadowShotAimBotPixel]  = speed_toggle( PS4_L2, PS4_DOWN  , toggle_aimassist[ShadowShotAimBotPixel]  , AIMASSIST_M  , SHAPES_TXT     , speed_toggle_DOWN[ShadowShotAimBotPixel]  );
				toggle_shotMod[ShadowShotAimBotPixel]    = speed_toggle( PS4_L2, PS4_LEFT  , toggle_shotMod[ShadowShotAimBotPixel]    , SHOTMOD_M    , SHOT_MOD_TXT   , speed_toggle_LEFT[ShadowShotAimBotPixel]  );
				
		
	
			
			    if(Left_hook)
			    {
			    	count_shadow += get_rtime();
			    	if(count_shadow >= 5000)
			    	{
			                                                                                                                                                      		cls_oled(0);
			    		count_shadow = 0;
			                                                                                                                                                      		Right_hook = FALSE;
			    		Left_hook = FALSE;
			    	}
			    }
			    
			    if(Right_hook)
			                                                                                                                                                      {
			    	DGT += get_rtime();
			    	
					if(DGT >= 100) 
					{
						SD1 += 2;	TP1 += 1;	TP2 -= 1;	DGT  = 0;
					}
					DGR += get_rtime();
					
					if(DGR >= 30) 
			                                                                                                                                                                                                                                                                                                                                                                                                                                                      		{
					                                                                                                                                                  	Y_1 += 1;	Y_2 += 2;	Y_3 += 3;	Y_4 += 4;
			                                                                                                                                                  			Y_5 += 5;	Y_6 += 6;	Y_7 += 7;	Y_8 += 8;
					                                                                                                                                                  	DGR  = 0;
					}
					
					name();
					MSC += get_rtime();
					
					if(MSC >= 1000) 
					{
						MSC = 0;	
						RT += 1;
					}
					
					if(RT == 30) 
					{
						Right_hook = 0;
						RT = 0;
						cls_oled(0);
					}
			    }
			} 
			


		
		                                                                                                                                                  	if(toggle_aimabuse[ShadowShotAimBotPixel])
			{
				if(get_val(BTN[GeneralG]))
		                                                                                                                                                  			combo_run(SHADOW_AIMBOT);
				else
					combo_stop(SHADOW_AIMBOT);
			}
			
		
		
		
			if(toggle_aimassist[ShadowShotAimBotPixel])
			{
		                                                                                                                                                  		if(toggle_aimassist[ShadowShotAimBotPixel] == STICKY) 
				{	
					if(get_val(BTN[GeneralG]) || get_val(BTN[MR_Producer]) && (isqrt(pow(abs(get_ival(PS4_RY)),2) + pow(abs(get_ival(PS4_RX)),2)) < 100) )
					    combo_run(STICKY);
				}
				else 
				{
					if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] && get_val(BTN[MR_Producer]))
		                                                                                                                                                  			{
		                                                                                                                                                  				RX = SmartSens(NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel], PS4_RX);
						RY = SmartSens(ar_y, PS4_RY);
					}
					else
					{
						RX = get_val(PS4_RX);
						RY = get_val(PS4_RY);
					}
					
					actual_Magnitude = isqrt(pow(RX, 2) + pow(RY, 2));	
					max_Magnitude = (actual_Magnitude < 100);
				
					if(!(time++ % 1))
						angle += razor_2[ShadowShotAimBotPixel];
						
			                                                                                                                                                  		angle = angle % 360;
			                                                                                                                                                                                                                                                                                                    		sin_angle = Polar_Array[angle % 360];
			                                                                                                                                                  		cos_angle = Polar_Array[(angle + 270) % 360];
					
				  
				  	if(get_val(BTN[MR_Producer]) || get_val(BTN[GeneralG]))
				  	{
				    	if(actual_Magnitude <= black_aim[ShadowShotAimBotPixel]) 
				    	{
							sin_angle -= RY;
				      		cos_angle -= RX;
				    	}
					    else 
					                                                                                                                                                      {
					                                                                                                                                                  		sin_angle = (sin_angle * (200 - ((abs(RY) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
							cos_angle = (cos_angle * (200 - ((abs(RX) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
					    }
					    
					    GetShapesV1(black_aim[ShadowShotAimBotPixel]);
					    
					    if((!get_val(BTN[MR_Producer]) && toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel]) || !toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel])
					    {
							set_val(PS4_RX, clamp(get_val(PS4_RX) + cos_angle, -100, 100));
							set_val(PS4_RY, clamp(get_val(PS4_RY) + sin_angle, -100, 100));
				  		}
					}
				}
			}
			
		
			
		
		                                                                                                                                                  	if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel])
			{
			
			                                                                                                                                                  	if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == STANDARD)
					NOTORIOUSrecoil_start[ShadowShotAimBotPixel] = NOTORIOUSrecoil_end[ShadowShotAimBotPixel];
					
			
	    		if(NOTORIOUSrecoil_start[ShadowShotAimBotPixel] < NOTORIOUSrecoil_end[ShadowShotAimBotPixel])
	    	                                                                                                                                                     		i_val = 1; 
	    		else
	    	                                                                                                                                                      	i_val = -1;
	    	                                                                                                                                                  	i_pnt = (NOTORIOUSrecoil_time[ShadowShotAimBotPixel] / 10) / (abs(NOTORIOUSrecoil_start[ShadowShotAimBotPixel] - NOTORIOUSrecoil_end[ShadowShotAimBotPixel])); 
	    		
	    	
	    		if(!get_val(BTN[MR_Producer])) 
	    		{
					ar_y = NOTORIOUSrecoil_start[ShadowShotAimBotPixel];
	    	    	Shadow_stabz = 0;
	    	    	i_num = 0;
	    	    	Killshotz = 0;
	    	    	Roundhouse = 0;
	    	    	NOTORIOUSrecoil_boost = 0;
	    		}     
	    					
	    		if(get_val(BTN[MR_Producer]))
				{
				
					NOTORIOUSrecoil_boost += random(1, 5);
					if(NOTORIOUSrecoil_boost > 10)
						NOTORIOUSrecoil_boost = 0;
						
				
					if(toggle_νεκρός)
					{
						if(get_ptime(BTN[MR_Producer]) < 500 || get_rumble(RUMBLE_A))
							Killshotz = 1;
						else if(get_rumble(RUMBLE_A) == 0)
							Killshotz = 0;
					}
					else
						Killshotz = 1;
						
				
			        if(!p_complete())  
						ar_y = p_val();
			        else
			            ar_y = NOTORIOUSrecoil_end[ShadowShotAimBotPixel];
			 
				
					if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] >= RUMBLELOW) 
					{    
					    Roundhouse = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
					    
					                                                                                                                                                      if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == RUMBLELOW)  KO_Kick  = 4;
					                                                                                                                                                      if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == RUMBLEMED)  KO_Kick  = 2;
					                                                                                                                                                      if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == RUMBLEHIGH) KO_Kick  = 1;
					                                 
					    if(Roundhouse > 10 && Roundhouse < 90) 
					    {
					        
						Shadowzzz = ( (Roundhouse + Shadow[ShadowShotAimBotPixel]) / KO_Kick);//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
					        
					        if(!toggle_aimassist[ShadowShotAimBotPixel])
					        {
					            set_val(PS4_RY, clamp(SmartSens(Shadowzzz + NOTORIOUSrecoil_boost, PS4_RY), -100, 100));
					            set_val(PS4_RX, clamp(SmartSens(NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel], PS4_RX), -100, 100));//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
					        }
					        else if(toggle_aimassist[ShadowShotAimBotPixel] > STICKY)
					        {
					                                                                                                                                                              set_val(PS4_RY, clamp(SmartSens(Shadowzzz + NOTORIOUSrecoil_boost, PS4_RY) + sin_angle, -100, 100));
					                                                                                                                                                              set_val(PS4_RX, clamp(SmartSens(NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel], PS4_RX) + cos_angle, -100, 100));
					        }
					        else if(toggle_aimassist[ShadowShotAimBotPixel] == STICKY)
					        {
					            recoilAssist = Shadowzzz + NOTORIOUSrecoil_boost;
					            combo_run(STICKY);
					        }
					    }
					}
				
					else
					{	
				  
				    	if(toggle_burstfire[ShadowShotAimBotPixel] == 1 && get_ptime(BTN[MR_Producer]) <= Zumo)
							NOTORIOUSrecoil();
							
				    
				        if(toggle_burstfire[ShadowShotAimBotPixel] == 0  || toggle_rapidfire[ShadowShotAimBotPixel] >= 1)
				        {
					        if(Killshotz)
								NOTORIOUSrecoil();
				    	}
				    }
		    	}
		   
				if(get_ival(PS4_L2) && event_press(PS4_PS) )
				{		
					BLK = !BLK;
					
					if(!BLK)
						ShadowShotzz = TRUE;
				}	
			}
			
		
			
		
			if(toggle_rapidfire[ShadowShotAimBotPixel])
			{
				if(toggle_rapidfire[ShadowShotAimBotPixel] == DYNAMIC)
				{
				
					Zumo = 50;
					Rage_Quit = 35 * 10 - (get_ival(XB1_RT) * 3);
		    	}
				else if(toggle_rapidfire[ShadowShotAimBotPixel] == RPM)
				{
				
		    		Rage_Quit = 5000 / ((bullet_time[ShadowShotAimBotPixel] * 10) / 60); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
		   			Zumo = Rage_Quit;
		    		if(Rage_Quit < 0) Rage_Quit = 0;
		    	}
				else if(toggle_rapidfire[ShadowShotAimBotPixel] == RPS)
				{
				
		    		Rage_Quit = 500 / bullet_time[ShadowShotAimBotPixel]; 
		   			Zumo = Rage_Quit;
		    		if(Rage_Quit < 0) Rage_Quit = 0;
		    	}
	    
	    	
	    		if(get_val(BTN[MR_Producer]))
	    			combo_run(RAPIDFIRE);
	    		else
	    			combo_stop(RAPIDFIRE);
	    		
	    		Mode_1 = 150;
	    		Mode_2 = 300;
	    		combo_run(BLINK);
			}
			
	
		
		
			if(toggle_burstfire[ShadowShotAimBotPixel]) 
			{
	    	
				Zumo = incognito;
				Rage_Quit = Unity_Sonics;
				
	    
	    		if(get_val(BTN[MR_Producer]))	
	    			combo_run(BURSTFIRE);
				else
	    			combo_stop(BURSTFIRE);
	
	    		Mode_1 = 200;
	    		Mode_2 = 1000;
	    		combo_run(BLINK);
			}
			
		
		
		} 
		

		if(HEADHUNTER) 
		{
			Right_hook = FALSE;
			count_shadow = 0;
			
			if(BLK) 
			{
				display_edit_line1();
				display_values();
			}
			else if(Shadow_stabzz || Estrella) 
			{
				display_edit_line1();
				display_edit_line2();
				display_edit_line3();
			}
			else if(GalaxyShotUPspiral) 
			{
				display_GalaxyShotUPspiral();
			}
			else if(Crip_Shot)
			{
				display_edit_line1();
				display_edit_profiles();
			}
			else 
			{
				cls_oled(OLED_WHITE); 
			
				print(center_x(get_string_length(get_string(MODNAME_TXT, modName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, modName_idx));//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
			
				display_edit_line3();
				count_shadow = 2000;
			}
			
			Left_hook = TRUE;
	        HEADHUNTER = FALSE;
	       
	    } 
	    


		if(LIVERSHOT) 
		{
			CLIK = 0;
			rect_oled(1, 50, 126, 13, OLED_WHITE, OLED_BLACK); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	                                                                                                                                                  		CrazyShotz = cycle(CrazyShotz, 0, entry_count(get_controller_infoTXT()));
	                                                                                                                                                  		print(center_x(get_string_length(get_string(get_controller_infoTXT(), CrazyShotz)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(get_controller_infoTXT(), CrazyShotz));
			LIVERSHOT = FALSE;
		}
		
	} 
	


    if(ShadowShotzz)
    {
    	Right_hook= FALSE;
    	count_shadow = 0;	
    	
   
                                                                                                                                                      	cls_oled(OLED_BLACK);
    	image_oled(0, 0, FALSE, TRUE, logo[0]);	//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
   			
   	
   	                                                                                                                                                  	number_to_string(NotoriouzScriptzz, find_digits(NotoriouzScriptzz)); 

   
		display_profile();
		
   		Left_hook = TRUE;	
    	ShadowShotzz = FALSE;
    }
		



	if(get_ival(PS4_L2))
	{ 
		set_val(PS4_TOUCH, 0);
		set_val(PS4_SHARE, 0);
		set_val(PS4_PS, 0);
	}
		


	if(Errror)
		led(7);
	                                                                                                                                                  else
		led(ShadowShotAimBotPixel);
		
	                                                                                                                                                  if(toggle_rapidfire[ShadowShotAimBotPixel])
		combo_run(BLINK);		
}




combo RACE {
                                                                                                                                                  	X_1 = random(0,127);
	wait(AUTOWALLHACK);
                                                                                                                                                  	X_2 = random(0,127);
	wait(AUTOWALLHACK);
                                                                                                                                                  	X_3 = random(0,127);
	wait(AUTOWALLHACK);
                                                                                                                                                  	X_4 = random(0,127);
	wait(AUTOWALLHACK); 
	X_5 = random(0,127);
	wait(AUTOWALLHACK);
                                                                                                                                                  	X_6 = random(0,127);
                                                                                                                                                  	wait(AUTOWALLHACK); 
                                                                                                                                                  	X_7 = random(0,127);
	wait(AUTOWALLHACK); 
                                                                                                                                                  	X_8 = random(0,127);
	wait(AUTOWALLHACK);
}

combo RUMBLE_ON {					
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
                                                                                                                                                  	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

combo Errror {
	cls_oled(OLED_BLACK);
    print(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8,OLED_FONT_MEDIUM,OLED_WHITE,MUTE[0]);    
                                                                                                                                                      wait(get_rtime());
    wait(250);
    print(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_WHITE,HOLD[0]);     
                                                                                                                                                      print(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,ACTIVE[0]); 
    wait(get_rtime());
    wait(5000);  
                                                                                                                                                      cls_oled(OLED_BLACK);
    wait(get_rtime());
    wait(5000);  
}

combo SAVE { 
	call(RUMBLE_ON);
	wait(150);
	call(RUMBLE_ON);		
	wait(1000);
	ShadowShotzz = TRUE;
}

combo RN {
	
	wait(SAVER);
}

combo BLINK {
	led(ShadowShotAimBotPixel);//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
    wait(Mode_1);
    led(7);
    wait(Mode_2);
}

combo BURSTFIRE { 
    wait(Zumo);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
}

                                                                                                                                                  combo RAPIDFIRE { 
    wait(Zumo);
                                                                                                                                                      set_val(BTN[MR_Producer], 0);
    wait(Rage_Quit - get_rtime());
    set_val(BTN[MR_Producer], 0);
}  

combo STRAFESHOT { 
    set_val(PS4_LX, 100);
                                                                                                                                                      wait(strafe_time);
    wait(50);
    set_val(PS4_LX, -100);
    wait(strafe_time);
    wait(50);
}

combo JUMPSHOT {
 	set_val(BTN[Lzzz], 100);
                                                                                                                                                   	wait(50);
 	wait(100);
 }	
 
combo SHADOW_AIMBOT {
    wait(S_Release);
    set_val(BTN[GeneralG], 0);
                                                                                                                                                      wait(Cali_Kush - get_rtime());
                                                                                                                                                      set_val(BTN[GeneralG], 0);
}

int recoilAssist;

combo STICKY {
	if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] && get_val(BTN[MR_Producer]))
    	set_val(PS4_RY, SmartSens(recoilAssist + black_aim[ShadowShotAimBotPixel], PS4_RY));
                                                                                                                                                      else 
    	set_val(PS4_RY, SmartSens(black_aim[ShadowShotAimBotPixel], PS4_RY));
    wait(razor_2[ShadowShotAimBotPixel]);
                                                                                                                                                      
                                                                                                                                                  	if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] && get_val(BTN[MR_Producer]))
    	set_val(PS4_RY, SmartSens(recoilAssist, PS4_RY));
                                                                                                                                                     set_val(PS4_RX, SmartSens(black_aim[ShadowShotAimBotPixel], PS4_RX));
                                                                                                                                                      set_val(PS4_LX, SmartSens(black_aim[ShadowShotAimBotPixel], PS4_LX));
    wait(razor_2[ShadowShotAimBotPixel]);
    
                                                                                                                                                  	if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] && get_val(BTN[MR_Producer]))
    	set_val(PS4_RY, SmartSens(recoilAssist + inv(black_aim[ShadowShotAimBotPixel]), PS4_RY));
                                                                                                                                                      else
    	set_val(PS4_RY, SmartSens(inv(black_aim[ShadowShotAimBotPixel]), PS4_RY));
                                                                                                                                                      wait(razor_2[ShadowShotAimBotPixel]);
                                                                                                                                                      
                                                                                                                                                  	if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] && get_val(BTN[MR_Producer]))
                                                                                                                                                       	set_val(PS4_RY, SmartSens(recoilAssist, PS4_RY));
        set_val(PS4_RX, SmartSens(inv(black_aim[ShadowShotAimBotPixel]), PS4_RX));
     set_val(PS4_LX, SmartSens(inv(black_aim[ShadowShotAimBotPixel]), PS4_LX));
    wait(razor_2[ShadowShotAimBotPixel] - get_rtime());
    
	            if(get_val(PS4_R2))
    	set_val(PS4_RY, SmartSens(recoilAssist, PS4_RY));
                set_val(PS4_RX, SmartSens(inv(black_aim[ShadowShotAimBotPixel]), PS4_RX));
    set_val(PS4_LX, SmartSens(inv(black_aim[ShadowShotAimBotPixel]), PS4_LX));
}                                                                                                                                                  

int combo_btn, combo_wait;

combo SPAM {
	wait(combo_wait);
	   set_val(combo_btn, 0);
   	wait(combo_wait - get_rtime());
	    set_val(combo_btn, 0);
}

combo HOLD_BREATH {
	set_val(BTN[StabAssist2],0);
	            wait(60);
	set_val(BTN[StabAssist2],100);
	           wait(110);
	set_val(BTN[StabAssist2],0);
	          wait(110);
}

combo SLIDE_CANCEL_MW {              
	set_val(BTN[DarkAIM], 100);          
	wait(Hasbulla);                         
	set_val(BTN[DarkAIM], 0);            
	wait(60);                          
  	      set_val(BTN[DarkAIM], 100);       //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞   
	wait(50);                          
	set_val(BTN[DarkAIM], 100);          
	set_val(BTN[Lzzz], 100);           
             	wait(60);                          
	    set_val(BTN[DarkAIM], 0);            
	set_val(BTN[Lzzz], 100);          
	   wait(10);                        
	set_val(BTN[Lzzz], 0);
}

combo SLIDE_CANCEL_CW { 
	set_val(BTN[DarkAIM], 100);//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	wait(Hasbulla);
	set_val(BTN[DarkAIM], 0);
	wait(20);
	set_val(BTN[StabAssist2], 0);
	set_val(BTN[DarkAIM], 100);
	set_val(BTN[StabAssist2], 100);//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	wait(20);
	set_val(BTN[DarkAIM], 0);
	set_val(BTN[StabAssist2], 0);
	wait(20);
}





int Shadow_stabz;  

function p_complete() { 

    Shadow_stabz++;
    if(Shadow_stabz > NOTORIOUSrecoil_time[ShadowShotAimBotPixel] / 10) 
    {
        Shadow_stabz = NOTORIOUSrecoil_time[ShadowShotAimBotPixel] / 10;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
        return 1;
    }    
    return 0;
}  

int i_num;
int i_pnt;
int ar_y;	
int i_val;

function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
} 

int SmartVal;	

function SmartSens(f_val, f_axis) { 

	SmartVal = ( (f_val * ( 100 - abs( get_val(f_axis) ) ) ) / 100); 
    return clamp(get_val(f_axis) + SmartVal, -100, 100);//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
}

function NOTORIOUSrecoil() {

	if(!toggle_aimassist[ShadowShotAimBotPixel])
	{
		set_val(PS4_RY, clamp(SmartSens(ar_y, PS4_RY), -100, 100));   //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
		set_val(PS4_RX, clamp(SmartSens(NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel], PS4_RX), -100, 100));
	}
	else if(toggle_aimassist[ShadowShotAimBotPixel] > STICKY)
	{
		set_val(PS4_RY, clamp(SmartSens(ar_y, PS4_RY) + sin_angle, -100, 100));   //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
		set_val(PS4_RX, clamp(SmartSens(NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel], PS4_RX) + cos_angle, -100, 100));
	}
	else if(toggle_aimassist[ShadowShotAimBotPixel] == STICKY)
	{
		recoilAssist = ar_y;
		combo_run(STICKY);
	}
}



int time;
int RX, RY;
int angle, cos_angle, sin_angle;
int SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
int actual_Magnitude, max_Magnitude, Position;

                                                                                                                                                                        const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
                                                                                                                                                                     80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
                                                                                                                                                                     6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
                                                                                                                                                                     -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
                                                                                                                                                                     -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
                                                                                                                                                                     -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
                                                                                                                                                                     -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
                                                                                                                                                                     9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
                                                                                                                                                                     82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 

int timer;

function GetShapesV1(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < 1)
			SpiralPosition1 = TRUE;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = FALSE;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < 1)
			SpiralPosition2 = TRUE;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = FALSE;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	} 
	if(toggle_aimassist[ShadowShotAimBotPixel] == 2)                    
	{ 
        RY = (sin_angle * f_var) /100;//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
        RX = (cos_angle * f_var) /100;  //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	} 
	if(toggle_aimassist[ShadowShotAimBotPixel] == 3)        
	{ 
        RY = (sin_angle * f_var) /100;
        RX = (cos_angle * (f_var / 2)) /100; 
	}
	if(toggle_aimassist[ShadowShotAimBotPixel] == 4)                     
	{ 
        RY = (sin_angle * (f_var / 2)) /100;
        RX = (cos_angle * f_var) /100;  
	} 
	if(toggle_aimassist[ShadowShotAimBotPixel] == 5)                  
	{
        RY = (sin_angle * InnerSpiral) /100;
        RX = (cos_angle * OuterSpiral) /100;  
	}
    if(toggle_aimassist[ShadowShotAimBotPixel] == 6)
	{
		RX = (cos_angle * Position) /100;
		RY = (sin_angle * Position) /100;
	
		if(Position == 0)
		    RX = (cos_angle * f_var) /100;
		    
		if(Position == 1)
			RY = (sin_angle * f_var) /100;
			
		if(Position == 2) 
			RX = (cos_angle * f_var) /100 * -1;
			
		if(Position == 3)
			RY = (sin_angle * f_var) /100 * -1;
			
		timer++;
		if(timer >= razor_2[ShadowShotAimBotPixel])
		{
			Position++;
			timer = 0;
		}
				
		if(Position == 4)
			Position = 0;
    }
    
	cos_angle = RX;
	sin_angle = RY;
}



int sens_x;
int sens_y;
int sens_xcnt,sens_ycnt;

function set_sens () { 

    if(abs(get_lval(PS4_RX)) >= MadAim) 
    {
	    sens_xcnt += 1;
	    
		if(sens_xcnt >= 不能死的唯一一个真正的战士z && sens_x < Headshot_BOOM) 
		{ 
		    sens_x += 1; 
		    sens_xcnt = 0; 
		} 
			else if(sens_x >= Headshot_BOOM) 
				sens_xcnt = 0;  
	}
	
    else if(abs(get_val(PS4_RX)) < Killer_Shots) 
    {
	    sens_xcnt = 0; 
	    sens_x = CommisionerRealG;
	} 
	
    if(abs(get_lval(PS4_RY)) >= MadAim) 
    {
	    sens_ycnt += 1;
		if(sens_ycnt >= 不能死的唯一一个真正的战士z && sens_y < Headshot_BOOM) 
		{ 
		    sens_y += 1; 
		    sens_ycnt = 1; 
		} 
			else if(sens_y >= Headshot_BOOM) 
				sens_ycnt = 0; 
	}
	
    else if(abs(get_val(PS4_RY)) < Killer_Shots) 
    {
	    sens_y = CommisionerRealG; 
	    sens_ycnt = 0;
	}
	
	sensitivity(PS4_RX,NOT_USE,sens_x);
    sensitivity(PS4_RY,NOT_USE,sens_y);
}



function check_shotActivator() {	

	if(toggle_shotActivator[ShadowShotAimBotPixel] == ADSFIRE)
	{
		if(get_val(BTN[GeneralG]) && get_val(BTN[MR_Producer]))
			return TRUE;
	}
	else if(toggle_shotActivator[ShadowShotAimBotPixel] == ADSONLY)
	{
		if(get_val(BTN[GeneralG]) && !get_val(BTN[MR_Producer]))
			return TRUE;
	}
	else if(toggle_shotActivator[ShadowShotAimBotPixel] == FIREONLY)
	{
		if(!get_val(BTN[GeneralG]) && get_val(BTN[MR_Producer]))
			return TRUE;
	}	
	return FALSE;
}



function display_GalaxyShotUPspiral() {


	rect_oled(13, 1, 102, 47, OLED_WHITE, OLED_BLACK); 

	PrintMenu(Shadow_stabzz_MM,CONTROLLER_MM,PROFILES_MM);
	PrintMenu(CONTROLLER_MM,PROFILES_MM,Shadow_stabzz_MM);
	PrintMenu(PROFILES_MM,Shadow_stabzz_MM,CONTROLLER_MM);
}

function PrintMenu(f_active,f_line3,f_line1){  
 
	if(menuName_idx == f_active) 
	{ 
		print(center_x(get_string_length(get_string(MENUNAME_TXT, f_active)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MENUNAME_TXT,f_active));
		print(center_x(get_string_length(get_string(MENUNAME_TXT, f_line3)) , OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MENUNAME_TXT,f_line3) ); 
		print(center_x(get_string_length(get_string(MENUNAME_TXT, f_line1)) , OLED_FONT_SMALL_WIDTH),LINE_1_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MENUNAME_TXT,f_line1) );
	} 
}

function display_edit_line1() {


	rect_oled(13, 1, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	if(Shadow_stabzz)
	{				
	
		if(modName_idx < ANTICHEAT_BYPASS) 
			display_profile ();
		else 
    		print(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,ALL[0]);
	}
	
	else if(BLK) 
	{
	
    	if(valName_idx == END_V && toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == STANDARD)
    		print(center_x(sizeof(NOTORIOUSRECOIL_VERTICAL) - 1, OLED_FONT_SMALL_WIDTH),LINE_1_Y,OLED_FONT_SMALL,OLED_WHITE,NOTORIOUSRECOIL_VERTICAL[0]);  
    	else
    		print(center_x(get_string_length(get_string(VALNAME_TXT, valName_idx)), OLED_FONT_SMALL_WIDTH),LINE_1_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(VALNAME_TXT, valName_idx));  
	}
	else if(Estrella)
	{
	
    	print(center_x(sizeof(CONTROLLER) - 1, OLED_FONT_SMALL_WIDTH),LINE_1_Y,OLED_FONT_SMALL,OLED_WHITE,CONTROLLER[0]);  
	}
	else if(Crip_Shot)
	{
	
    	print(center_x(get_string_length(get_string(PROFILESNAME_TXT, profilesName_idx)), OLED_FONT_SMALL_WIDTH),LINE_1_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(PROFILESNAME_TXT, profilesName_idx));
	}
}

function display_edit_line2() {
	

	rect_oled(13, 17, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
		
	if(Shadow_stabzz)
	{
	
		print(center_x(get_string_length(get_string(MODNAME_TXT, modName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, modName_idx));  // small size
	}
	else if(Estrella)
	{
	
		print(center_x(get_string_length(get_string(CONTROLLERNAME_TXT, controllerName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(CONTROLLERNAME_TXT, controllerName_idx));  // small size
	
	}
}

function display_edit_line3() {
	

	rect_oled(13, 33, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	if(Estrella)
	{
		display_toggle( controllerName_idx, ADS_BTN_C      , get_controller_layoutBTN_TXT(), GeneralG      );
		display_toggle( controllerName_idx, FIRE_BTN_C     , get_controller_layoutBTN_TXT(), MR_Producer     );
                                                                                                                                                  		display_toggle( controllerName_idx, TACTICAL_BTN_C , get_controller_layoutBTN_TXT(), Hackzz );
	                                                                                                                                                  	display_toggle( controllerName_idx, LETHAL_BTN_C   , get_controller_layoutBTN_TXT(), UgotFXCKED   );
	                                                                                                                                                  	display_toggle( controllerName_idx, JUMP_BTN_C     , get_controller_layoutBTN_TXT(), Lzzz     );
	                                                                                                                                                  	display_toggle( controllerName_idx, CROUCH_BTN_C   , get_controller_layoutBTN_TXT(), DarkAIM   );
		                                                                                                                                                  display_toggle( controllerName_idx, RELOAD_BTN_C   , get_controller_layoutBTN_TXT(), DEADshot   );
		                                                                                                                                                  display_toggle( controllerName_idx, MELEE_BTN_C    , get_controller_layoutBTN_TXT(), StabAssist    );
	                                                                                                                                                  	display_toggle( controllerName_idx, SPRINT_BTN_C   , get_controller_layoutBTN_TXT(), StabAssist2   );
	                                                                                                                                                  	display_toggle( controllerName_idx, WEAPON_BTN_C   , get_controller_layoutBTN_TXT(), StabAssist3   );
		                                                                                                                                                  display_toggle( controllerName_idx, HAIRTRIGGER_C  , ONOFF_TXT                     , StabAssist4  );
		                                                                                                                                                  display_toggle( controllerName_idx, RUMBLE_C       , ONOFF_TXT                     , Louis_V       );
	}
	else
	{
	
	    
		display_toggle( modName_idx, NOTORIOUSRECOIL_M , NOTORIOUSRECOIL_TXT     , toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel]    );
		display_toggle( modName_idx, RAPIDFIRE_M  , RAPIDFIRE_TXT      , toggle_rapidfire[ShadowShotAimBotPixel]     );
		display_toggle( modName_idx, BURSTFIRE_M  , ONOFF_TXT          , toggle_burstfire[ShadowShotAimBotPixel]     );
	                                                                                                                                                  	display_toggle( modName_idx, AIMASSIST_M  , SHAPES_TXT         , toggle_aimassist[ShadowShotAimBotPixel]     );
		                                                                                                                                                  display_toggle( modName_idx, AIMABUSE_M   , ONOFF_TXT          , toggle_aimabuse[ShadowShotAimBotPixel]      );
	                                                                                                                                                  	display_toggle( modName_idx, SHOTMOD_M    , SHOT_MOD_TXT       , toggle_shotMod[ShadowShotAimBotPixel]       );
	                                                                                                                                                  	display_toggle( modName_idx, SHOTACTIV_M  , SHOT_ACTIVATOR_TXT , toggle_shotActivator[ShadowShotAimBotPixel] );
	                                                                                                                                                  	display_toggle( modName_idx, HOLDBREATH_M , ONOFF_TXT          , toggle_holdBreath[ShadowShotAimBotPixel]    );
	                                                                                                                                                  	display_toggle( modName_idx, TURBOMELEE_M , ONOFF_TXT          , toggle_turboMelee[ShadowShotAimBotPixel]    );
	                                                                                                                                                  	display_toggle( modName_idx, AUTOADS_M     , ONOFF_TXT         , toggle_autoADS[ShadowShotAimBotPixel]       );
	                                                                                                                                                  	display_toggle( modName_idx, AUTOFIRE_M    , ONOFF_TXT         , toggle_autoFIRE[ShadowShotAimBotPixel]      );
		
		
		display_toggle( modName_idx, SENSITIVITY_M , SENSITIVITY_TXT , toggle_sensitivity );
		display_toggle( modName_idx, AUTORUN_M     , ONOFF_TXT       , toggle_autorun     );
		display_toggle( modName_idx, BUNNYHOP_M    , ONOFF_TXT       , toggle_bunnyHop    );
		display_toggle( modName_idx, SLIDECANCEL_M , SLIDECANCEL_TXT , toggle_slideCancel );
		display_toggle( modName_idx, νεκρός_M   , ONOFF_TXT       , toggle_νεκρός   );
	}
}

function display_edit_profiles() {
	if(profilesName_idx == PRIM_SEC_P)
	{		
	
		rect_oled(13, 18, 102, OLED_FONT_SMALL_HEIGHT + 19, OLED_BLACK , OLED_BLACK); 
		
		if(PRADA[profilesName_idx] == 0)
			print(center_x(sizeof(PRESS_BTN) - 1, OLED_FONT_SMALL_WIDTH),LINE_2_3_Y,OLED_FONT_SMALL,OLED_WHITE,PRESS_BTN[0]);
		else
			print(center_x(get_string_length(get_string(get_controller_profileBTN_TXT(), PRADA[profilesName_idx])), OLED_FONT_SMALL_WIDTH),LINE_2_3_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(get_controller_profileBTN_TXT(), PRADA[profilesName_idx]));
	}
	else
	{
	
		rect_oled(13, 17, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
		rect_oled(13, 33, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
		
		if(InTheShadow[profilesName_idx] == 0)
			print(center_x(sizeof(HOLD_BTN) - 1, OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,HOLD_BTN[0]);
		else
			print(center_x(get_string_length(get_string(get_controller_profileBTN_TXT(), InTheShadow[profilesName_idx])), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(get_controller_profileBTN_TXT(), InTheShadow[profilesName_idx]));
		
		if(PRADA[profilesName_idx] == 0)
			print(center_x(sizeof(PRESS_BTN) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,PRESS_BTN[0]);
		else
			print(center_x(get_string_length(get_string(get_controller_profileBTN_TXT(), PRADA[profilesName_idx])), OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(get_controller_profileBTN_TXT(), PRADA[profilesName_idx]));			
	}
}

function display_values() {


	rect_oled(38, 18, 51 , OLED_FONT_SMALL_HEIGHT + 3 , OLED_WHITE , OLED_BLACK); //
	rect_oled(27, 31, 74 , OLED_FONT_SMALL_HEIGHT + 6 , OLED_WHITE , OLED_BLACK); // 
	
	
                                                                                                                                                  	display_edit( START_V       , NOTORIOUSrecoil_start[ShadowShotAimBotPixel]      );
                                                                                                                                                  	display_edit( END_V         , NOTORIOUSrecoil_end[ShadowShotAimBotPixel]        );
                                                                                                                                                  	display_edit( TIME_V        , NOTORIOUSrecoil_time[ShadowShotAimBotPixel]       );
                                                                                                                                                  	display_edit( HORIZ_V       , NOTORIOUSrecoil_horizontal[ShadowShotAimBotPixel] );
                                                                                                                                                  	display_edit( RUMBLEPOWER_V , Shadow[ShadowShotAimBotPixel]          );
                                                                                                                                                  	display_edit( RATE_V        , bullet_time[ShadowShotAimBotPixel]          );
                                                                                                                                                  	display_edit( RADIUS_V      , black_aim[ShadowShotAimBotPixel]      );
                                                                                                                                                  	display_edit( STEPS_V       , razor_2[ShadowShotAimBotPixel]       );
				
	
	display_edit( BFHOLD_V      , incognito         );
                                                                                                                                                  	display_edit( BFRELEASE_V   , Unity_Sonics      );
                                                                                                                                                  	display_edit( HOLDTIME_V    , S_Release          );
                                                                                                                                                  	display_edit( RELEASETIME_V , Cali_Kush       );
	display_edit( STRAFETIME_V  , strafe_time            );
                                                                                                                                                  	display_edit( DSINITIAL_V   , CommisionerRealG  );
                                                                                                                                                  	display_edit( DSINCREASE_V  , MadAim         );
                                                                                                                                                  	display_edit( DSRESTART_V   , Killer_Shots       );
                                                                                                                                                  	display_edit( DSMAX_V       , Headshot_BOOM      );
                                                                                                                                                  	display_edit( DSRATE_V      , 不能死的唯一一个真正的战士z );
	display_edit( GENERAL_V     , Error                );
                                                                                                                                                  	display_edit( ADS_V         , SGT_Notorious                );
	display_edit( FIRE_V        , Notorious32455                );
	display_edit( ADSFIRE_V     , Shadow_abuse            );
	display_edit( CANCELTIME_V  , Hasbulla            );
}

int profile_y;

function display_profile() {

	if(ShadowShotzz)
		profile_y = 50; 
	else
		profile_y = 4; 
	
    print(center_x(get_string_length(get_string(PROFILE_TXT, ShadowShotAimBotPixel)), OLED_FONT_SMALL_WIDTH),profile_y,OLED_FONT_SMALL,OLED_WHITE,get_string(PROFILE_TXT, ShadowShotAimBotPixel));
}

function display_edit(f_idx, f_val) { 
	
    if(valName_idx == f_idx)
    		number_to_string(f_val, find_digits(f_val));
}

function display_toggle(f_idx, f_name, f_txt, f_toggle) { 

    if(f_idx == f_name)
    	print(center_x(get_string_length(get_string(f_txt, f_toggle)), OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(f_txt, f_toggle));
}



function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  
	
	if(valName_idx == f_idx)
	{
   														 
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); 
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); 
   
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); 
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); 
	}		
	return f_val;
}

function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
	   
	  	if(f_val < f_rng_min) 
	  		f_val = f_rng_min; 
	 
	  	if(f_val > f_rng_max) 
	  		f_val = f_rng_max; 
    		
        HEADHUNTER = TRUE; 
    }
    return f_val; 
} 



function toggle(f_idx, f_name, f_txt, f_val) { 
	
	if(f_idx == f_name)
	{
		if(event_press(PS4_UP))
		{
			f_val = cycle(f_val + 1, 0, entry_count(f_txt));	
			Set_Rumble(f_val);
		}

		if(event_press(PS4_DOWN))
		{
			f_val = cycle(f_val - 1, 0, entry_count(f_txt));
			Set_Rumble(f_val);
		}
		
		if(modName_idx == NOTORIOUSRECOIL_M) 
			speed_toggle_UP[ShadowShotAimBotPixel] = f_val;
		else if(modName_idx == RAPIDFIRE_M) 
		{
			if(f_val >= 1) 
				toggle_burstfire[ShadowShotAimBotPixel] = 0;
			
			speed_toggle_RIGHT[ShadowShotAimBotPixel] = f_val;
		}		
		else if(modName_idx == AIMASSIST_M) 
		{
			if(f_val >= 1 && toggle_sensitivity == 2) 
				toggle_sensitivity = 0;
			
			speed_toggle_DOWN[ShadowShotAimBotPixel] = f_val;
		}
		else if(modName_idx == SHOTMOD_M)
			speed_toggle_LEFT[ShadowShotAimBotPixel] = f_val;
		else if(modName_idx == BURSTFIRE_M)
		{
			if(f_val == 1) 
				toggle_rapidfire[ShadowShotAimBotPixel] = 0;
		}
		else if(modName_idx == SENSITIVITY_M) 
		{
			if(f_val == 2)
			{
				toggle_aimassist[0] = 0;
				toggle_aimassist[1] = 0;
				toggle_aimassist[2] = 0;
			}
		}
	}
	return f_val;
}

int speed_toggle_UP[3], speed_toggle_RIGHT[3], speed_toggle_DOWN[3], speed_toggle_LEFT[3];

function speed_toggle(f_hold, f_press, f_val, f_idx, f_txt, f_st) { 
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == 500) 
		{
			modName_idx = f_idx;
			
			if(f_val)
				f_val = 0;
			else
			{
				f_val = set_toggle_val(f_st, f_val, f_txt, f_press, 0); 
			}
			
			Set_Rumble(f_val);
		} 
		
		if(event_press(f_press) && get_brtime(f_press) <= 200) 
		{		
			modName_idx = f_idx;
			
			if(f_press != PS4_UP && f_press != PS4_RIGHT) 
			{
				if(f_val)
				{
					f_val = cycle(f_val++, 1, entry_count(f_txt));
					set_speed_toggle_val(f_press, f_val);
				}
				else
				{
					f_val = set_toggle_val(f_st, f_val, f_txt, f_press, 1); 
				}
			}
			
			Set_Rumble(f_val);
		}
		if(f_press != PS4_UP)
			set_val(f_press, 0)
	}
	return f_val;
}

function set_toggle_val(f_st, f_val, f_txt, f_press, f_min) { 

	if(!f_st)
	{
		f_val = cycle(f_val++, f_min, entry_count(f_txt));
		set_speed_toggle_val(f_press, f_val);
	}
	else
	{
		f_val = f_st;
	}
	
	if(modName_idx == AIMASSIST_M)
	{
		if(f_val >= 1 && toggle_sensitivity == 2) 
			toggle_sensitivity = 0;
	}
	return f_val;
}

function set_speed_toggle_val(f_press, f_val) {
	if(f_press == PS4_UP)
		speed_toggle_UP[ShadowShotAimBotPixel] = f_val;
	if(f_press == PS4_RIGHT)
		speed_toggle_RIGHT[ShadowShotAimBotPixel] =  f_val;
	if(f_press == PS4_DOWN)
		speed_toggle_DOWN[ShadowShotAimBotPixel] =  f_val;
	if(f_press == PS4_LEFT)
		speed_toggle_LEFT[ShadowShotAimBotPixel] =  f_val;
}

function Set_Rumble(f_val){
	if(f_val == 0) combo_run(RUMBLE_OFF);
	else combo_run(RUMBLE_ON);
	HEADHUNTER = TRUE; 
}

function check_toggle() {
	if(modName_idx == NOTORIOUSRECOIL_M  && toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel])      return TRUE;
	if(modName_idx == RAPIDFIRE_M   && toggle_rapidfire[ShadowShotAimBotPixel] > 1)   return TRUE;
	if(modName_idx == BURSTFIRE_M   && toggle_burstfire[ShadowShotAimBotPixel])       return TRUE;
	if(modName_idx == AIMASSIST_M   && toggle_aimassist[ShadowShotAimBotPixel])       return TRUE;
	if(modName_idx == AIMABUSE_M    && toggle_aimabuse[ShadowShotAimBotPixel])        return TRUE;
	if(modName_idx == SHOTMOD_M     && toggle_shotMod[ShadowShotAimBotPixel] == 1)    return TRUE;
	if(modName_idx == SENSITIVITY_M && toggle_sensitivity)                  return TRUE;
	if(modName_idx == SLIDECANCEL_M  && toggle_slideCancel)                 return TRUE;
	return FALSE;
}



                                                                                                                                                  enum { MODNAME_TXT      , VALNAME_TXT         , INFO_TOGGLE_PS_TXT  , INFO_EDIT_PS_TXT  , INFO_TOGGLE_XB_TXT  , INFO_EDIT_XB_TXT    , PROFILE_TXT      ,
                                                                                                                                                         MENUNAME_TXT     , CONTROLLERNAME_TXT  , ONOFF_TXT           , PROFILESNAME_TXT  , PROFILEBTN_PS_TXT   , PROFILEBTN_XB_TXT   , INFO_MAIN_PS_TXT , 
                                                                                                                                                         INFO_MAIN_XB_TXT , INFO_CONTROL_PS_TXT , INFO_CONTROL_XB_TXT , LAYOUT_BTN_PS_TXT , LAYOUT_BTN_XB_TXT   , NOTORIOUSRECOIL_TXT      , RAPIDFIRE_TXT    , 
                                                                                                                                                         SHAPES_TXT       , SHOT_MOD_TXT        , SHOT_ACTIVATOR_TXT  , SENSITIVITY_TXT   , INFO_PROFILE_PS_TXT , INFO_PROFILE_XB_TXT , SLIDECANCEL_TXT
                                                                                                                                                         }
       
function entry_count(f_array_idx) { 

    i = 0;
    if (f_array_idx == MODNAME_TXT) {              while (MODNAME[i] != -1) { i++; } }
    else if (f_array_idx == VALNAME_TXT) {         while (VALNAME[i] != -1) { i++; } }
    else if (f_array_idx == INFO_TOGGLE_PS_TXT) {  while (INFO_TOGGLE_PS[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == INFO_EDIT_PS_TXT) {    while (INFO_EDIT_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_TOGGLE_XB_TXT) {  while (INFO_TOGGLE_XB[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == INFO_EDIT_XB_TXT) {    while (INFO_EDIT_XB[i] != -1) { i++; } }
    else if (f_array_idx == PROFILE_TXT) {         while (PROFILE[i] != -1) { i++; } }
    else if (f_array_idx == MENUNAME_TXT) {        while (MENUNAME[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == CONTROLLERNAME_TXT) {  while (CONTROLLERNAME[i] != -1) { i++; } }
    else if (f_array_idx == ONOFF_TXT) {           while (ONOFF[i] != -1) { i++; } }
    else if (f_array_idx == PROFILESNAME_TXT) {    while (PROFILESNAME[i] != -1) { i++; } }
    else if (f_array_idx == PROFILEBTN_PS_TXT) {   while (PROFILEBTN_PS[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == PROFILEBTN_XB_TXT) {   while (PROFILEBTN_XB[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == INFO_MAIN_PS_TXT) {    while (INFO_MAIN_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_MAIN_XB_TXT) {    while (INFO_MAIN_XB[i] != -1) { i++; } }
    else if (f_array_idx == INFO_CONTROL_PS_TXT) { while (INFO_CONTROL_PS[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == LAYOUT_BTN_PS_TXT) {   while (LAYOUT_BTN_PS[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == LAYOUT_BTN_XB_TXT) {   while (LAYOUT_BTN_XB[i] != -1) { i++; } }
    else if (f_array_idx == NOTORIOUSRECOIL_TXT) {      while (NOTORIOUSRECOIL[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == RAPIDFIRE_TXT) {       while (RAPIDFIRE[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == SHAPES_TXT) {          while (SHAPES[i] != -1) { i++; } }
    else if (f_array_idx == SHOT_MOD_TXT) {        while (SHOT_MOD[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == SHOT_ACTIVATOR_TXT) {  while (SHOT_ACTIVATOR[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == SENSITIVITY_TXT) {     while (SENSITIVITY[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == INFO_PROFILE_PS_TXT) { while (INFO_PROFILE_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_PROFILE_XB_TXT) { while (INFO_PROFILE_XB[i] != -1) { i++; } }
                                                                                                                                                      else if (f_array_idx == SLIDECANCEL_TXT) {     while (SLIDECANCEL[i] != -1) { i++; } }
    return i - 1;
}

function get_string(f_array_idx, f_idx) { 

	if(f_array_idx == MODNAME_TXT)            return MODNAME[f_idx];
	if(f_array_idx == VALNAME_TXT)            return VALNAME[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_TOGGLE_PS_TXT)     return INFO_TOGGLE_PS[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_EDIT_PS_TXT)       return INFO_EDIT_PS[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_TOGGLE_XB_TXT)     return INFO_TOGGLE_XB[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_EDIT_XB_TXT)       return INFO_EDIT_XB[f_idx];
                                                                                                                                                  	if(f_array_idx == PROFILE_TXT)            return PROFILE[f_idx];
	if(f_array_idx == MENUNAME_TXT)           return MENUNAME[f_idx];
	if(f_array_idx == CONTROLLERNAME_TXT)     return CONTROLLERNAME[f_idx];
                                                                                                                                                  	if(f_array_idx == ONOFF_TXT)              return ONOFF[f_idx];
                                                                                                                                                  	if(f_array_idx == PROFILESNAME_TXT)       return PROFILESNAME[f_idx];
	                                                                                                                                                  if(f_array_idx == PROFILEBTN_PS_TXT)      return PROFILEBTN_PS[f_idx];
                                                                                                                                                  	if(f_array_idx == PROFILEBTN_XB_TXT)      return PROFILEBTN_XB[f_idx];
	                                                                                                                                                  if(f_array_idx == INFO_MAIN_PS_TXT)       return INFO_MAIN_PS[f_idx];
	                                                                                                                                                  if(f_array_idx == INFO_MAIN_XB_TXT)       return INFO_MAIN_XB[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_CONTROL_PS_TXT)    return INFO_CONTROL_PS[f_idx];
	                                                                                                                                                  if(f_array_idx == INFO_CONTROL_XB_TXT)    return INFO_CONTROL_XB[f_idx];
                                                                                                                                                  	if(f_array_idx == LAYOUT_BTN_PS_TXT)      return LAYOUT_BTN_PS[f_idx];
	                                                                                                                                                  if(f_array_idx == LAYOUT_BTN_XB_TXT)      return LAYOUT_BTN_XB[f_idx];
                                                                                                                                                  	if(f_array_idx == NOTORIOUSRECOIL_TXT)         return NOTORIOUSRECOIL[f_idx];
	                                                                                                                                                  if(f_array_idx == RAPIDFIRE_TXT)          return RAPIDFIRE[f_idx];
                                                                                                                                                  	if(f_array_idx == SHAPES_TXT)             return SHAPES[f_idx];
                                                                                                                                                  	if(f_array_idx == SHOT_MOD_TXT)           return SHOT_MOD[f_idx];
                                                                                                                                                  	if(f_array_idx == SHOT_ACTIVATOR_TXT)     return SHOT_ACTIVATOR[f_idx];
                                                                                                                                                  	if(f_array_idx == SENSITIVITY_TXT)        return SENSITIVITY[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_PROFILE_PS_TXT)    return INFO_PROFILE_PS[f_idx];
                                                                                                                                                  	if(f_array_idx == INFO_PROFILE_XB_TXT)    return INFO_PROFILE_XB[f_idx];
                                                                                                                                                  	if(f_array_idx == SLIDECANCEL_TXT)        return SLIDECANCEL[f_idx];
	return -1;
}// 瞄准机器人

                                                                                                                                                  int stringLength;

                                                                                                                                                  function get_string_length(offset) { 
    stringLength = 0;
    do { 
        offset++;
        stringLength++;
    } while (duint8(offset));// 瞄准机器人
    return stringLength;
}



                                                                                                                                                  function draw_base_menu() {
	rect_oled(0, 0, 128, 49, OLED_WHITE, OLED_BLACK); //  影射
	line_oled(1, 16, 126, 16, 1, OLED_BLACK); //  影射
	

	if(!Estrella)//  影射
	{
		rect_oled(2, 2, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_BLACK , OLED_WHITE); //  影射
		rect_oled(115, 2, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); //  影射
	}
}

function draw_Shadow_stabzz() {

	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);//  影射
	

	line_oled(1, 32, 126, 32, 1, OLED_WHITE); 
	

	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_BLACK , OLED_WHITE);//  影射
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_BLACK, OLED_WHITE); // 邪恶的目标
	rect_oled(2, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_BLACK , OLED_WHITE); // 邪恶的目标
	rect_oled(115, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_BLACK, OLED_WHITE); // 邪恶的目标
}

function draw_BLK() {// 邪恶的目标

	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);
	

	
	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE , OLED_WHITE); // 邪恶的目标
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE, OLED_WHITE); // 邪恶的目标
	rect_oled(2, 33, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE , OLED_WHITE); // 邪恶的目标
	rect_oled(115, 33, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE, OLED_WHITE); // 邪恶的目标
	
	rect_oled(14, 18, OLED_FONT_MEDIUM_WIDTH + 1, OLED_FONT_MEDIUM_HEIGHT + 11, OLED_WHITE , OLED_WHITE); // 邪恶的目标
	rect_oled(102, 18, OLED_FONT_MEDIUM_WIDTH + 1, OLED_FONT_MEDIUM_HEIGHT + 11, OLED_WHITE, OLED_WHITE); 


	line_oled(16, 31, 23, 31, 2, OLED_BLACK); // 邪恶的目标
	putc_oled(1, 43); // +
	puts_oled(103, 24, OLED_FONT_MEDIUM, 1, OLED_BLACK); 	// 邪恶的目标    

}

function draw_Crip_Shot() {// 邪恶的目标

	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);// 邪恶的目标
	


	rect_oled(2, 18, OLED_FONT_MEDIUM_WIDTH , OLED_FONT_MEDIUM_HEIGHT + 11, OLED_WHITE , OLED_WHITE); // 邪恶的目标
	rect_oled(115, 18, OLED_FONT_MEDIUM_WIDTH , OLED_FONT_MEDIUM_HEIGHT + 11, OLED_WHITE, OLED_WHITE); // 邪恶的目标
}	

function draw_main_menu() {
	rect_oled(0, 0, 128, 49, OLED_BLACK, OLED_WHITE); 
	rect_oled(1, 1, 126, 47, OLED_WHITE, OLED_BLACK); 
	btn_left = RIGHT;
	btn_right = LEFT;
	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X + 2, LINE_2_Y, OLED_FONT_SMALL, 1, OLED_BLACK); 	
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X - 2, LINE_2_Y, OLED_FONT_SMALL, 1, OLED_BLACK);
	
}

define UP = 131, DOWN = 132, LEFT = 133, RIGHT = 134, TRIANGLE = 10, Y = 89, CROSS = 127, A = 65;
define LEFT_X = 4, RIGHT_X = 117;
define LINE_1_Y = 4, LINE_2_Y = 20, LINE_3_Y = 36, LINE_4_Y = 53, LINE_2_3_Y = 28;  
int btn_left;
int btn_right;

function draw_chars_line1() {

	if(BLK)
	{
		btn_left = LEFT;
		btn_right = RIGHT;
	}
	else
	{		
		if(get_controller() == PIO_PS4)
		{
			btn_left = TRIANGLE;
			btn_right = TRIANGLE;
		}
		else
		{
			btn_left = Y;
			btn_right = Y;
		}
	}
	
	if(!Estrella)
	{

		rect_oled(3, 3, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); 
		rect_oled(116, 3, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
	
		putc_oled(1,btn_left); 
		puts_oled(LEFT_X, LINE_1_Y, OLED_FONT_SMALL, 1, col_char_left); 	
		putc_oled(1,btn_right); 
		puts_oled(RIGHT_X, LINE_1_Y, OLED_FONT_SMALL, 1, col_char_right); 
	}
}

function draw_chars_line2() {

	btn_left = LEFT;
	btn_right = RIGHT;


	rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); 
	rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞


	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_2_Y, OLED_FONT_SMALL, 1, col_char_left); 	
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_2_Y, OLED_FONT_SMALL, 1, col_char_right); 
	
}

function draw_chars_line3() { 

	btn_left = DOWN;
	btn_right = UP;
		

	rect_oled(3, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left);
	rect_oled(116, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞


	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_3_Y, OLED_FONT_SMALL, 1, col_char_left); 
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_3_Y, OLED_FONT_SMALL, 1, col_char_right);  
}

function draw_hold_to_edit() { 

	if(get_controller() == PIO_PS4)
	{
	
		rect_oled(28, 19, OLED_FONT_SMALL_WIDTH + 1 , OLED_FONT_SMALL_HEIGHT , OLED_WHITE , col_rec_left); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
		rect_oled(91, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT  , OLED_WHITE, col_rec_right);
		
		putc_oled(1, CROSS);
		puts_oled(92, LINE_2_Y - 1, OLED_FONT_SMALL, 1, col_char_left);
		putc_oled(1, CROSS);
		puts_oled(28, LINE_2_Y - 1, OLED_FONT_SMALL, 1, col_char_right);
		

		rect_oled(27, 18, OLED_FONT_SMALL_WIDTH + 3 , OLED_FONT_SMALL_HEIGHT + 2 , OLED_BLACK , OLED_WHITE); 
		rect_oled(91, 18, OLED_FONT_SMALL_WIDTH + 3, OLED_FONT_SMALL_HEIGHT + 2 , OLED_BLACK, OLED_WHITE); 
	}
	else
	{

		rect_oled(28, 19, OLED_FONT_SMALL_WIDTH + 2 , OLED_FONT_SMALL_HEIGHT , OLED_WHITE , col_rec_left); 
		rect_oled(91, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT  , OLED_WHITE, col_rec_right);
		
		putc_oled(1, A);
		puts_oled(92, LINE_2_Y , OLED_FONT_SMALL, 1, col_char_left);
		putc_oled(1, A);
		puts_oled(29, LINE_2_Y , OLED_FONT_SMALL, 1, col_char_right);
		
	
		rect_oled(27, 18, OLED_FONT_SMALL_WIDTH + 4 , OLED_FONT_SMALL_HEIGHT + 2 , OLED_BLACK , OLED_WHITE); 
		rect_oled(90, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 2 , OLED_BLACK, OLED_WHITE); 
	}
}

function draw_char_profiles() {

	btn_left = LEFT;
	btn_right = RIGHT;


	rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 17, OLED_WHITE , col_rec_left); 
	rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 17, OLED_WHITE, col_rec_right); //記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
		


	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, 28, OLED_FONT_SMALL, 1, col_char_left); 
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, 28, OLED_FONT_SMALL, 1, col_char_right); 
}

int col_char_left; 
int col_char_right;
int col_rec_left = 1;
int col_rec_right = 1;

function button_animation() {

	if(event_press(PS4_TRIANGLE))
	{
		col_char_left = 1;
		col_char_right = 1;
		col_rec_left = 0;
		col_rec_right = 0;
		
		if(!BLK && !GalaxyShotUPspiral)
			draw_chars_line1();
	}
	else if(event_release(PS4_TRIANGLE))
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(Shadow_stabzz)
		{
			if(PRADA[PRIM_SEC_P] == 0)
			{
				if(InTheShadow[CUSTOM_P] == 0 || PRADA[CUSTOM_P] == 0)
					ShadowShotAimBotPixel = 0;
				else
					ShadowShotAimBotPixel = cycle(ShadowShotAimBotPixel + 2, 0, entry_count(PROFILE_TXT));//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
			}
			else if(InTheShadow[CUSTOM_P] == 0 || PRADA[CUSTOM_P] == 0)
				ShadowShotAimBotPixel = cycle(ShadowShotAimBotPixel++, 0, 1);
			else
				ShadowShotAimBotPixel = cycle(ShadowShotAimBotPixel + 1, 0, entry_count(PROFILE_TXT));//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
				
			HEADHUNTER = TRUE; 
		}
		else if(Crip_Shot)
		{
			profilesName_idx = cycle(profilesName_idx + 1, 0, entry_count(PROFILESNAME_TXT));//記金賞地違冊版鮮就高止成知利。集君崎気場報替昨与推経地除発立海能。選大振特田事申課権数後高橋。関試前害編意朝毎被白示研男保情。読賞
			
			if(profilesName_idx == PRIM_SEC_P)
			{
				draw_base_menu();
				draw_Crip_Shot();	
				draw_chars_line1();	
				draw_char_profiles();
			}
			else
			{
				draw_base_menu();		
				draw_Shadow_stabzz();		
				draw_chars_line1();		
				draw_chars_line2(); 
				draw_chars_line3();	
			}
			
			HEADHUNTER = TRUE; 
		}
		if(!BLK && !GalaxyShotUPspiral)
			draw_chars_line1();
	}	

	if(event_press(PS4_LEFT))
	{
		col_char_left = 1;
		col_char_right = 0;
		col_rec_left = 0;
		col_rec_right = 1;
			
		if(BLK)
		{
			if(get_val(PS4_CROSS))
			{
				draw_chars_line2();
			}
			else
			{
				valName_idx -= 1;
			
				if(modName_idx == NOTORIOUSRECOIL_M && toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == STANDARD)
				{	
					if(valName_idx == TIME_V)
						valName_idx = END_V;
					if(valName_idx < END_V)
						valName_idx = HORIZ_V;
				}
				draw_chars_line1();
				HEADHUNTER = TRUE; 
			}
		}
		else if(Shadow_stabzz)
		{
			modName_idx = cycle(modName_idx - 1, 0, entry_count(MODNAME_TXT)); 
			draw_chars_line2();
			HEADHUNTER = TRUE; 
		}
		else if(Estrella)
		{
			controllerName_idx = cycle(controllerName_idx - 1, 0, entry_count(CONTROLLERNAME_TXT)); 
			draw_chars_line2();
			HEADHUNTER = TRUE;
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx == PRIM_SEC_P)
			{
				PRADA[profilesName_idx] = cycle(PRADA[profilesName_idx] - 1, 0, entry_count(PROFILEBTN_PS_TXT));
				draw_char_profiles();
			}
			else
			{
				InTheShadow[profilesName_idx] = cycle(InTheShadow[profilesName_idx] - 1, 0, entry_count(PROFILEBTN_PS_TXT));  
				draw_chars_line2();
			}	
			HEADHUNTER = TRUE; 
		}		
	}
	if(event_release(PS4_LEFT))
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
			
		if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
				draw_chars_line1();
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx == PRIM_SEC_P)
				draw_char_profiles();
			else
				draw_chars_line2();
		}	
		else if(!GalaxyShotUPspiral)
			draw_chars_line2();
	}

	if(event_press(PS4_RIGHT))
	{
		col_char_left = 0;
		col_char_right = 1;
		col_rec_left = 1;
		col_rec_right = 0;	
			
		if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
			{
				valName_idx += 1;				
			
				if(modName_idx == NOTORIOUSRECOIL_M && toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] == STANDARD)
				{								
					if(valName_idx == TIME_V)
						valName_idx = HORIZ_V;
					if(valName_idx > HORIZ_V)
						valName_idx = END_V;
				}
				draw_chars_line1();
				HEADHUNTER = TRUE; 
			}
		}
		else if(Shadow_stabzz)
		{
			modName_idx = cycle(modName_idx + 1, 0, entry_count(MODNAME_TXT));  
			draw_chars_line2();
			HEADHUNTER = TRUE; 
		}
		else if(Estrella)
		{
			controllerName_idx = cycle(controllerName_idx + 1, 0, entry_count(CONTROLLERNAME_TXT)); 
			draw_chars_line2();
			HEADHUNTER = TRUE;
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx == PRIM_SEC_P)
			{
				PRADA[profilesName_idx] = cycle(PRADA[profilesName_idx] + 1, 0, entry_count(PROFILEBTN_PS_TXT));
				draw_char_profiles();
			}
			else
			{
				InTheShadow[profilesName_idx] = cycle(InTheShadow[profilesName_idx] + 1, 0, entry_count(PROFILEBTN_PS_TXT));  
				draw_chars_line2();
			}	
			HEADHUNTER = TRUE; 
		}	
	}
	if(event_release(PS4_RIGHT))
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
			
		if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
				draw_chars_line1();
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx == PRIM_SEC_P)
				draw_char_profiles();
			else
				draw_chars_line2();
		}	
		else if(!GalaxyShotUPspiral)
			draw_chars_line2();
	}

	if(event_press(PS4_UP))
	{
		col_char_left = 0;
		col_char_right = 1;
		col_rec_left = 1;
		col_rec_right = 0;
		
		if(GalaxyShotUPspiral)
		{
			menuName_idx = cycle(menuName_idx - 1, 0, entry_count(MENUNAME_TXT)); 
			HEADHUNTER = TRUE;
		}
		else if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx != PRIM_SEC_P)
			{
				PRADA[profilesName_idx] = cycle(PRADA[profilesName_idx] + 1, 0, entry_count(PROFILEBTN_PS_TXT)); 
				draw_chars_line3();
				HEADHUNTER = TRUE; 
			}
		}
		else if(!GalaxyShotUPspiral)
			draw_chars_line3();
	}
	if(event_release(PS4_UP))
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
			
		if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx != PRIM_SEC_P)
				draw_chars_line3();
		}
		else if(!GalaxyShotUPspiral)
			draw_chars_line3();
	}

	if(event_press(PS4_DOWN))
	{
		col_char_left = 1;
		col_char_right = 0;
		col_rec_left = 0;
		col_rec_right = 1;
		
		if(GalaxyShotUPspiral)
		{
			menuName_idx = cycle(menuName_idx + 1, 0, entry_count(MENUNAME_TXT)); 
			HEADHUNTER = TRUE;
		}
		else if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx != PRIM_SEC_P)
			{
				PRADA[profilesName_idx] = cycle(PRADA[profilesName_idx] - 1, 0, entry_count(PROFILEBTN_PS_TXT));  
				draw_chars_line3();
				HEADHUNTER = TRUE;
			}
		}
		else if(!GalaxyShotUPspiral)
			draw_chars_line3();
	}
	if(event_release(PS4_DOWN))
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
			
		if(BLK)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
		else if(Crip_Shot)
		{
			if(profilesName_idx != PRIM_SEC_P)
				draw_chars_line3();
		}
		else if(!GalaxyShotUPspiral)
			draw_chars_line3();
	}

	if(event_press(PS4_CROSS))
	{
		col_char_left = 1;
		col_char_right = 1;
		col_rec_left = 0;
		col_rec_right = 0;
		
		if(BLK)	
			draw_hold_to_edit();
	}
	if(event_release(PS4_CROSS))
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(GalaxyShotUPspiral)
		{
			if(menuName_idx == Shadow_stabzz_MM)
			{
				modName_idx = 0;
				Shadow_stabzz = TRUE;
				GalaxyShotUPspiral = FALSE;			
				draw_Shadow_stabzz();				
				draw_chars_line2(); 
				draw_chars_line3();	
			}
			
			else if(menuName_idx == CONTROLLER_MM)
			{
				controllerName_idx = 0;
				Estrella = TRUE;
				GalaxyShotUPspiral = FALSE;		
				draw_Shadow_stabzz();				
				draw_chars_line2(); 
				draw_chars_line3();	
			}
			
			else if(menuName_idx == PROFILES_MM)
			{
				profilesName_idx = 0;
				Crip_Shot = TRUE;
				GalaxyShotUPspiral = FALSE;	
				draw_Crip_Shot();	
				draw_char_profiles();
			}
			
			CrazyShotz = 0;
			draw_base_menu();
			draw_chars_line1();
			HEADHUNTER = TRUE;
			LIVERSHOT = TRUE;
		}
		else if(Shadow_stabzz) 
		{
			if(check_toggle()) 
			{
				if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] >= RUMBLELOW)
					valName_idx = RUMBLEPOWER_V; 
				else
					valName_idx = entry_count(VALNAME_TXT) + 1; 
						
				if(modName_idx == RAPIDFIRE_M) 
				{
					if(toggle_rapidfire[ShadowShotAimBotPixel] == 2 && bullet_time[ShadowShotAimBotPixel] < 60)
						bullet_time[ShadowShotAimBotPixel] = 240;
					if(toggle_rapidfire[ShadowShotAimBotPixel] == 3 && bullet_time[ShadowShotAimBotPixel] > 25)
						bullet_time[ShadowShotAimBotPixel] = 4;
				}
					
				CrazyShotz = 0;		
				BLK = TRUE;
				Shadow_stabzz = FALSE;
				draw_BLK();			
				draw_chars_line1();		
				draw_chars_line2();		
				draw_hold_to_edit();
				draw_chars_line3();	
				HEADHUNTER = TRUE;
				LIVERSHOT = TRUE;
			}
		}
		else if(BLK)	
			draw_hold_to_edit();
	}

	if(event_press(PS4_CIRCLE))
	{
		if(Shadow_stabzz) 
		{
			GalaxyShotUPspiral = TRUE;
			Shadow_stabzz = FALSE;
			draw_main_menu();
		}
		if(BLK) 
		{
			Shadow_stabzz = TRUE;
			BLK = FALSE;
			draw_Shadow_stabzz();		
			draw_chars_line1();	
			draw_chars_line2();	
			draw_chars_line3();
		}
		if(Estrella) 
		{
			GalaxyShotUPspiral = TRUE;
			Estrella = FALSE;
			draw_main_menu();
		}
		if(Crip_Shot) 
		{
			GalaxyShotUPspiral = TRUE;
			Crip_Shot = FALSE;
			draw_main_menu();
		}
		CrazyShotz = 0;
		HEADHUNTER = TRUE;
		LIVERSHOT = TRUE;
	}

	if(event_release(PS4_PS))
	{
		if(BLK)
		{
			if(toggle_NOTORIOUSrecoil[ShadowShotAimBotPixel] >= RUMBLELOW)
				valName_idx = RUMBLEPOWER_V; 
			else
				valName_idx = entry_count(VALNAME_TXT) + 1; 
					
			modName_idx = NOTORIOUSRECOIL_M;
			draw_base_menu();
			draw_BLK();			
			draw_chars_line1();		
			draw_chars_line2();		
			draw_hold_to_edit();
			draw_chars_line3();	
			HEADHUNTER = TRUE;
			LIVERSHOT = TRUE;
		}
	}
	
}

const image logo = {124, 46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xC0, 0x03, 0x00, 0xE0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x01, 0x80, 0x00, 0x1C, 0x00, 0xFC, 0x0E, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x38, 0x00, 0x01, 0x80, 0x0C, 0x61, 0xC0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x31, 0x83, 0x80, 0x00, 0x38, 0x01, 0x8E, 0x1C, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x18, 0x38, 0x00, 0x03, 0x80, 0x18, 0x61, 0xC0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x31, 0x83, 0x80, 0x00, 0x38, 0x01, 0xCE, 0x1C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x18, 0x30, 0x00, 0x03, 0x00, 0x0C, 0xC1, 0xC0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x31, 0x87, 0x00, 0x01, 0xB1, 0x00, 0xC8, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x88, 0x70, 0x00, 0x3F, 0xF0, 0x0E, 0x41, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0x00, 0x07, 0xFF, 0x00, 0xE4, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0xC8, 0x60, 0x00, 0x77, 0xA0, 0x07, 0x03, 0x80, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x06, 0x00, 0x00, 0x72, 0x00, 0x70, 0x30, 0x00, 0x26, 0x1C, 0x70, 0x00, 0x01, 0x80, 0x00, 0xE0, 0x60, 0x00, 0x07, 0x20, 0x03, 0x83, 0x00, 0x0F, 0x63, 0xE7, 0x1C, 0x10, 0x18, 0x00, 0x0E, 0x0E, 0x00, 0x38, 0x62, 0x00, 0x38, 0x31, 0xC1, 0xFE, 0x73, 0x63, 0xE1, 0x01, 0xC0, 0x00, 0x70, 0xE3, 0x87, 0xC6, 0x20, 0x01, 0xC3, 0x3E, 0x1C, 0xE7, 0x36, 0x77, 0x11, 0x9C, 0x00, 0x03, 0x0E, 0x78, 0xEE, 0x62, 0x00, 0x1C, 0x33, 0xE3, 0xCE, 0x71, 0xC6, 0x73, 0x39, 0xC0, 0x00, 0x38, 0xCD, 0x8E, 0xE6, 0x00, 0x00, 0xE3, 0x6E, 0x3D, 0xE7, 0x1C, 0x07, 0x33, 0x9C, 0x00, 0x03, 0x8D, 0xDC, 0x0E, 0x60, 0x0E, 0x0E, 0x3C, 0xE3, 0x9E, 0x70, 0x83, 0x73, 0x39, 0xC0, 0x18, 0x1C, 0xD9, 0xC6, 0xE6, 0x00, 0xE0, 0xF3, 0x8E, 0x33, 0xE7, 0x18, 0x27, 0x37, 0x98, 0x01, 0x81, 0xCF, 0x3C, 0x6E, 0x60, 0x0E, 0x0F, 0x30, 0xE3, 0x3C, 0x71, 0x82, 0x73, 0xFF, 0x80, 0x18, 0x1C, 0x63, 0xC4, 0xE3, 0x00, 0xF0, 0xF2, 0x0E, 0x36, 0xC7, 0x98, 0x26, 0x3E, 0xF8, 0x03, 0xC1, 0xE4, 0x3C, 0x4C, 0x30, 0x0F, 0x1F, 0x20, 0xE1, 0xE0, 0x7F, 0x83, 0xE3, 0xCF, 0x00, 0x3C, 0x3E, 0x43, 0xC7, 0xC3, 0xE0, 0xFF, 0xF2, 0x0F, 0x3C, 0x03, 0xF0, 0x1C, 0x08, 0xC0, 0x03, 0xFF, 0xCC, 0x3C, 0x38, 0x3E, 0x0F, 0xFF, 0x00, 0xF0, 0xC0, 0x1E, 0x00, 0x02, 0x88, 0x00, 0x1F, 0xFC, 0x03, 0xC0, 0x81, 0x00, 0x1F, 0xA0, 0x0A, 0x08, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x7F, 0xC0, 0x38, 0x08, 0x10, 0x01, 0xF2, 0x00, 0x00, 0x80, 0x02, 0x00, 0x40, 0x80, 0x00, 0x03, 0xC8, 0x00, 0x80, 0x81, 0x00, 0x10, 0x20, 0x00, 0x08, 0x00, 0x20, 0x04, 0x08, 0x00, 0x00, 0x20, 0x80, 0x08, 0x08, 0x10, 0x01, 0x02, 0x00, 0x00, 0x80, 0x02, 0x00, 0x40, 0x80, 0x00, 0x02, 0x48, 0x00, 0x00, 0x01, 0x00, 0x10, 0x20, 0x00, 0x08, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x30, 0x01, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};




function get_controller_profileBTN_TXT() {
	
	if(get_controller() == PIO_PS4) return PROFILEBTN_PS_TXT;
	else                            return PROFILEBTN_XB_TXT;
	
	return -1;
}

function get_controller_layoutBTN_TXT() {
	
                                                                                                                                                                                                                                                                                                    	if(get_controller() == PIO_PS4) return LAYOUT_BTN_PS_TXT;
                                                                                                                                                                                                                                                                                                    	else                            return LAYOUT_BTN_XB_TXT;
	
	return -1;
}

function get_controller_infoTXT() {

	if(get_controller() == PIO_PS4)
	{
		if(GalaxyShotUPspiral)            return INFO_MAIN_PS_TXT;
	                                                                                                                                                                                                                                                                                                    	else if(Shadow_stabzz)        return INFO_TOGGLE_PS_TXT;
	                                                                                                                                                                                                                                                                                                    	else if(BLK)        return INFO_EDIT_PS_TXT;
	                                                                                                                                                                                                                                                                                                    	else if(Estrella) return INFO_CONTROL_PS_TXT;
		else if(Crip_Shot)   return INFO_PROFILE_PS_TXT;
	}
	else
	{
	                                                                                                                                                                                                                                                                                                    	if(GalaxyShotUPspiral)            return INFO_MAIN_XB_TXT;
	                                                                                                                                                                                                                                                                                                    	else if(Shadow_stabzz)        return INFO_TOGGLE_XB_TXT;
	                                                                                                                                                                                                                                                                                                    	else if(BLK)        return INFO_EDIT_XB_TXT;
	                                                                                                                                                                                                                                                                                                    	else if(Estrella) return INFO_CONTROL_XB_TXT;
		else if(Crip_Shot)   return INFO_PROFILE_XB_TXT;
	}
	return -1;
}



int c,c_val;

function number_to_string(f_val,f_digits) {

                                                                                                                                                                                                                                                                                                        i = 1;  c_val = 10000;
    
	if(f_val < 0) 
	{          
                                                                                                                                                                                                                                                                                                             putc_oled(i,45);    
                                                                                                                                                                                                                                                                                                             i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            
        }
        c_val /= 10;
    }
    if(ShadowShotzz)
    	puts_oled(120, 54, OLED_FONT_SMALL, i - 1, OLED_WHITE); 
    else
    	puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),28,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); 
}

function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}

function find_digits(f_num) {

                                                                                                                                                                                                                                                                                                        f_num = abs(f_num);
                                                                                                                                                                                                                                                                                                        if(f_num / 10000 > 0) return 5;
                                                                                                                                                                                                                                                                                                        if(f_num /  1000 > 0) return 4;
                                                                                                                                                                                                                                                                                                        if(f_num /   100 > 0) return 3;
                                                                                                                                                                                                                                                                                                        if(f_num /    10 > 0) return 2;
                          return 1;
}

function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}

function center_y(f_size) {

    return (OLED_HEIGHT  / 2) - (f_size / 2);
}

function press_hold(f_btn) { 

	return event_press(f_btn) || get_ival(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

function led(f_color) {

   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

function block_btn() {

                                                                                                                                                                                                                                                                                                    set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
                                                                                                                                                                                                                                                                                                    set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
                                                                                                                                                                                                                                                                                                    set_val(PS4_L1     , 0 ); 	set_val(PS4_R1    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
                                                                                                                                                                                                                                                                                                    set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
                                                                                                                                                                                                                                                                                                    set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);

}



int RT,MSC,SD1,DGT,DGR,TP1,TP2;//איך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץאיך ווילן טשיץ
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8,RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;//איך ווילן טשיץ
int SSMU1 = 1,SSMU2 = 8,SSMU3 = 15,SSMU4 = 22,SSMU5 = 29,SSMU6 = 36,SSMU7 = 43;
define SSA1 = 78,SSA2 = 79,SSA3 = 90,SSA4 = 66,SSA5 = 65,SSA6 = 82,SSA7 = 68,SSA8 = 82,SSA9 = 73,SSA10 = 70,SSA11 = 82,SSA13 = 50,SSA14 = 49,SAVER = 5000,AUTOWALLHACK = 10;

function name(){
	cls_oled(0);//איך ווילן טשיץ
	combo_run(RACE);
	combo_run(RN);
if (Y_1 > 64)  Y_1 =   0;
if (Y_2 > 64)  Y_2 =   0;
if (Y_3 > 64)  Y_3 =   0;
if (Y_4 > 64)  Y_4 =   0;
if (Y_5 > 64)  Y_5 =   0;
if (Y_6 > 64)  Y_6 =   0;
if (Y_7 > 64)  Y_7 =   0;
if (Y_8 > 64)  Y_8 =   0;
if (SD1 > 105) SD1 = -50;
if (TP1 > 45)  TP1 =   0;
if (TP2 < 0)   TP2 =  55;//איך ווילן טשיץ
	putc_oled(1,RN1);
	puts_oled(X_1,Y_1,0,1,1);
	putc_oled(1,RN2);
	puts_oled(X_2,Y_2,0,1,1);
	putc_oled(1,RN3);
	puts_oled(X_3,Y_3,0,1,1);
	putc_oled(1,RN4);
	puts_oled(X_4,Y_4,0,1,1);
	putc_oled(1,RN5);
	puts_oled(X_5,Y_5,0,1,1);
	putc_oled(1,RN6);
	puts_oled(X_6,Y_6,0,1,1);
	putc_oled(1,RN7);
	puts_oled(X_7,Y_7,0,1,1);
	putc_oled(1,RN8);
	puts_oled(X_8,Y_8,0,1,1);
	putc_oled(1,SSA1);
	puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
	putc_oled(1,SSA2);
	puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
	putc_oled(1,SSA2);
	puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
	putc_oled(1,SSA3);
	puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
	putc_oled(1,SSA4);
	puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
	putc_oled(1,SSA5);
	puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
	putc_oled(1,SSA6);
	puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
}



int mask;
int ret;
int pmemValue;

function set_15var(pvar, ret, position) { 
	for(i = position; i < (1 + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret << position);
	
	return pvar;
}

function get_15var(pvar, position){
	mask = 0;
	ret = 0;
	for(i = 0; i < 1 ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask << position
	ret = (pvar & mask) >> position
return ret;
}

function set_4var(_1, _2, _3, _4) { 
	return 0xff00 & ((0xf0 & (_1 << 4) | _2) << 8) | (0xf0 & (_3 << 4) | _4); 
}

function get_4var(f_PMemory, f_dec_pos) { 
	return  (f_PMemory >> (4 * f_dec_pos)) & 0x0F; 
}

function set_2var(var1, var2) { 
	ret = 0;
	
	if(var1 < 0)
   		var1 = abs(var1) | 0x80;

	ret = (abs(var2) << 8)|var1;
	
	if(var2 < 0)
		ret *= -1;
	
	return ret;
}

function get_2var(pvar, var) {
	ret = 0;
	
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = (abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar >> 8;

	    if(pvar < 0)
			ret += 1;
	}
	
	return ret;
}

function save() {
	GalaxyShotUPspiral = FALSE;
	Shadow_stabzz = FALSE;
	BLK = FALSE;
	Estrella = FALSE;
	Crip_Shot = FALSE;
	cls_oled(OLED_BLACK);
	print(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	
	combo_run(SAVE);

	pmemValue = set_15var(pmemValue, toggle_burstfire[0]  ,  0);		pmemValue = set_15var(pmemValue, toggle_burstfire[1]  ,  1);		pmemValue = set_15var(pmemValue, toggle_burstfire[2]  ,  2);
	pmemValue = set_15var(pmemValue, toggle_aimabuse[0]   ,  3);		pmemValue = set_15var(pmemValue, toggle_aimabuse[1]   ,  4);		pmemValue = set_15var(pmemValue, toggle_aimabuse[2]   ,  5);
	pmemValue = set_15var(pmemValue, toggle_autoADS[0]    ,  6);		pmemValue = set_15var(pmemValue, toggle_autoADS[1]    ,  7);		pmemValue = set_15var(pmemValue, toggle_autoADS[2]    ,  8);
	pmemValue = set_15var(pmemValue, toggle_autoFIRE[0]   ,  9);		pmemValue = set_15var(pmemValue, toggle_autoFIRE[1]   , 10);		pmemValue = set_15var(pmemValue, toggle_autoFIRE[2]   , 11);
	pmemValue = set_15var(pmemValue, toggle_holdBreath[0] , 12);		pmemValue = set_15var(pmemValue, toggle_holdBreath[1] , 13);		pmemValue = set_15var(pmemValue, toggle_holdBreath[2] , 14);
	set_pvar(SPVAR_1,pmemValue); 
	
	
	pmemValue = set_15var(pmemValue, toggle_turboMelee[0] ,  0);		pmemValue = set_15var(pmemValue, toggle_turboMelee[1] ,  1);		pmemValue = set_15var(pmemValue, toggle_turboMelee[2] ,  2);
	pmemValue = set_15var(pmemValue, toggle_autorun       ,  3);	 	pmemValue = set_15var(pmemValue, toggle_bunnyHop      ,  4);	 	pmemValue = set_15var(pmemValue, StabAssist4   ,  5); 		
	pmemValue = set_15var(pmemValue, Louis_V        ,  6);	    pmemValue = set_15var(pmemValue, toggle_νεκρός     ,  7);
	set_pvar(SPVAR_2,pmemValue);
	
	pmemValue = set_4var(toggle_NOTORIOUSrecoil[0], toggle_NOTORIOUSrecoil[1], toggle_NOTORIOUSrecoil[2], toggle_slideCancel);
	set_pvar(SPVAR_3,pmemValue);
	
	pmemValue = set_4var(toggle_rapidfire[0], toggle_rapidfire[1], toggle_rapidfire[2], NOT_USE);
	set_pvar(SPVAR_4,pmemValue);
	
	pmemValue = set_4var(toggle_aimassist[0], toggle_aimassist[1], toggle_aimassist[2], NOT_USE);
	set_pvar(SPVAR_5,pmemValue);
	
	pmemValue = set_4var(toggle_shotMod[0], toggle_shotMod[1], toggle_shotMod[2], NOT_USE);
	set_pvar(SPVAR_6,pmemValue);
	
	pmemValue = set_4var(toggle_shotActivator[0], toggle_shotActivator[1], toggle_shotActivator[2], toggle_sensitivity);
	set_pvar(SPVAR_7,pmemValue);
	
	
	pmemValue = set_2var(GeneralG, MR_Producer);
	set_pvar(SPVAR_8,pmemValue);
	
	pmemValue = set_2var(Hackzz, UgotFXCKED);
	set_pvar(SPVAR_9,pmemValue);
	
	pmemValue = set_2var(Lzzz, DarkAIM);
	set_pvar(SPVAR_10,pmemValue);
	
	pmemValue = set_2var(DEADshot, StabAssist);
	set_pvar(SPVAR_11,pmemValue);
	
	pmemValue = set_2var(StabAssist2, StabAssist3);
	set_pvar(SPVAR_12,pmemValue);
	
	
	pmemValue = set_2var(InTheShadow[0], InTheShadow[1]);
	set_pvar(SPVAR_13,pmemValue);
	
	pmemValue = set_2var(InTheShadow[2], PRADA[0]);
	set_pvar(SPVAR_14,pmemValue);

	pmemValue = set_2var(PRADA[1], PRADA[2]);
	set_pvar(SPVAR_15,pmemValue);


	
	pmemValue = set_2var(NOTORIOUSrecoil_start[0], NOTORIOUSrecoil_end[0]);
	set_pvar(SPVAR_16,pmemValue);
	
	pmemValue = set_2var(NOTORIOUSrecoil_start[1], NOTORIOUSrecoil_end[1]);
	set_pvar(SPVAR_17,pmemValue);
	
	pmemValue = set_2var(NOTORIOUSrecoil_start[2], NOTORIOUSrecoil_end[2]);
	set_pvar(SPVAR_18,pmemValue);
	
	set_pvar(SPVAR_19,NOTORIOUSrecoil_time[0]);
	set_pvar(SPVAR_20,NOTORIOUSrecoil_time[1]);
	set_pvar(SPVAR_21,NOTORIOUSrecoil_time[2]);
	
	
	pmemValue = set_2var(NOTORIOUSrecoil_horizontal[0], Shadow[0]);
	set_pvar(SPVAR_22,pmemValue);
	
	pmemValue = set_2var(NOTORIOUSrecoil_horizontal[1], Shadow[1]);
	set_pvar(SPVAR_23,pmemValue);
	
	pmemValue = set_2var(NOTORIOUSrecoil_horizontal[2], Shadow[2]);
	set_pvar(SPVAR_24,pmemValue);
	
	
	set_pvar(SPVAR_25,bullet_time[0]);
	set_pvar(SPVAR_26,bullet_time[1]);
	set_pvar(SPVAR_27,bullet_time[2]);
	
	
	set_pvar(SPVAR_28, incognito   );
	set_pvar(SPVAR_29, Unity_Sonics);
	
	
	pmemValue = set_2var(black_aim[0], razor_2[0]);
	set_pvar(SPVAR_30,pmemValue);
	pmemValue = set_2var(black_aim[1], razor_2[1]);
	set_pvar(SPVAR_31,pmemValue);
	pmemValue = set_2var(black_aim[2], razor_2[2]);
	set_pvar(SPVAR_32,pmemValue);

	
	set_pvar(SPVAR_33,S_Release);
	set_pvar(SPVAR_34,Cali_Kush);
	
	
	set_pvar(SPVAR_35,strafe_time);
	
	
	set_pvar(SPVAR_36,Error);
	set_pvar(SPVAR_37,SGT_Notorious);
	set_pvar(SPVAR_38,Notorious32455);
	set_pvar(SPVAR_39,Shadow_abuse);
	
	
	set_pvar(SPVAR_40,CommisionerRealG);
	
	pmemValue = set_2var(MadAim, Killer_Shots);
	set_pvar(SPVAR_41,pmemValue);
	
	set_pvar(SPVAR_42,Headshot_BOOM);
	set_pvar(SPVAR_43,不能死的唯一一个真正的战士z);
	

	                                                                                                                                                                                                                                                                                                    set_pvar(SPVAR_44,Hasbulla);
}



	                                                                                                                                                                                                                                                                                                                       const string SAVE = "SAVE SUCCESS";
	                                                                                                                                                                                                                                                                                                    const string ALL = "ALL";
	                                                                                                                                                                                                                                                                                                    const string MUTE = "Errror";
	                                                                                                                                                                                                                                                                                                    const string HOLD = "PRESS Cicle twi";
	                                                                                                                                                                                                                                                                                                    const string ACTIVE = "to turn ON"
	                                                                                                                                                                                                                                                                                                    const string CONTROLLER = "Controller"
	                                                                                                                                                                                                                                                                                                    const string NOTORIOUSRECOIL_VERTICAL = "AR Vertical";
	                                                                                                                                                                                                                                                                                                    const string PRESS_BTN = "Press BTN";
	                                                                                                                                                                                                                                                                                                    const string HOLD_BTN = "Hold BTN";
	
	const string ONOFF[] = { 
	                                                                                                                                                                                                                                                                                                    "OFF", "ON" }; 
	
	                                                                                                                                                                                                                                                                                                    const string PROFILE[] = {
	                                                                                                                                                                                                                                                                                                    "OPEN L1 + L3", "SECOND PROFILE", "ALL WEAPONS" };
	
	                                                                                                                                                                                                                                                                                                    const string INFO_MAIN_PS[] = {
	                                                                                                                                                                                                                                                                                                    "PS VERSION 1.2", "ENABLE AIMBOT", "USE SHAREPLAY", "AND MOD MENU", "TO DETECT ENEMY", "SHAPES + OBJECTS", "DOWNLOAD FROM", "OUR WEBSITE", "NOTORIOUSCRIPTZ"};
	
	                                                                                                                                                                                                                                                                                                    const string INFO_TOGGLE_PS[] = {
	                                                                                                                                                                                                                                                                                                    "PS5", "ENABLE AIMBOT", "USE SHAREPLAY", "TO DETECT ENEMY", "SHAPES + OBJECTS", "YOLOv5", 
	                                                                                                                                                                                                                                                                                                    "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5"}; 
	                                                                                                                                                                                                                                                                                                    
	                                                                                                                                                                                                                                                                                                    const string INFO_EDIT_PS[] = {
	otoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", 
	                                                                                                                                                                                                                                                                                                    "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz"}; 
	
	                                                                                                                                                                                                                                                                                                    const string INFO_CONTROL_PS[] = {
	                                                                                                                                                                                                                                                                                                    "PS5", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", 
	                                                                                                                                                                                                                                                                                                    "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz"}; 
	
	                                                                                                                                                                                                                                                                                                    const string INFO_PROFILE_PS[] = {
	                                                                                                                                                                                                                                                                                                    "PS5", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz" , "Notoriouscriptz",
	                                                                                                                                                                                                                                                                                                    "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz"};

	                                                                                                                                                                                                                                                                                                    const string INFO_MAIN_XB[] = {
	                                                                                                                                                                                                                                                                                                    "XBOX VERSION 1.2", "ENABLE AIMBOT", "OPEN XBOX ", "REMOTE PLAY", "TO DETECT ENEMY", "SHAPES + OBJECTS", "DOWNLOAD FROM", "OUR WEBSITE", "NOTORIOUSCRIPTZ"}; 
	
	                                                                                                                                                                                                                                                                                                    const string INFO_TOGGLE_XB[] = {
	                                                                                                                                                                                                                                                                                                    "XBOX1", "ENABLE AIMBOT", "OPEN XBOX", "REMOTE PLAY", "Notoriouscriptz", "Notoriouscriptz", 
	                                                                                                                                                                                                                                                                                                    "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "SHADOW VERSION 1.2", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz"}; 
	
	                                                                                                                                                                                                                                                                                                    const string INFO_EDIT_XB[] = {
	                                                                                                                                                                                                                                                                                                    "XBOX1", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", 
	                                                                                                                                                                                                                                                                                                    "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz"}; 
	
	                                                                                                                                                                                                                                                                                                    const string INFO_CONTROL_XB[] = {
	                                                                                                                                                                                                                                                                                                    "XBOX1", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz",  
	                                                                                                                                                                                                                                                                                                    "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz", "Notoriouscriptz"}; 
	
	                                                                                                                                                                                                                                                                                                    const string INFO_PROFILE_XB[] = {
	                                                                                                                                                                                                                                                                                                    "XBOX1", "YOLOv5", "YOLOv5", "YOLOv5" , "YOLOv5",
	                                                                                                                                                                                                                                                                                                    "YOLOv5", "YOLOv5", "YOLOv5", "YOLOv5+", "YOLOv5", "YOLOv5", "YOLOv5"};  ????????????????